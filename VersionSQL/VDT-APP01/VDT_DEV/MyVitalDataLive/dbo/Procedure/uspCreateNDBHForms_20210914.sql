/****** Object:  Procedure [dbo].[uspCreateNDBHForms_20210914]    Committed by VersionSQL https://www.versionsql.com ******/

/* =============================================
Author:	Deepank Johri
Create date: 08-12-2021
Description:	Create NDBH forms based on behavioral health factors
This program is meant to run as a job nightly after CFRs complete
Example: EXEC dbo.uspCreateNDBHForms 

Modifications
Date			Name			Comments	
08/12/2021      Deepank         Initial Version
08/30/2021		Deepank, Ed		Added CFR JSON field
============================================= */
CREATE PROCEDURE [dbo].[uspCreateNDBHForms_20210914]

AS
BEGIN

SET NOCOUNT ON;

-- Obtain the list of Members for whom we need to generate NDBH forms
-- Query for New Directions referrals based on ER visits and a behavioral health diagnosis
-- Exclude members that cannot be contacted or have been contacted or are in case management

DROP TABLE IF EXISTS #ExcludedMVDID
DROP TABLE IF EXISTS #ERVisit
CREATE TABLE #ExcludedMVDID (MVDID varchar(30))

	INSERT INTO #ExcludedMVDID (MVDID)
/*
SELECT distinct(MVDID)
FROM CFR_Rule_Exclusion (readuncommitted) re
JOIN HPWorkFlowRule (readuncommitted) wfr ON wfr.Rule_ID = re.RuleID
JOIN CFR_ExcludedMVDID (readuncommitted) em ON em.ExclusionID = re.ExclusionID
JOIN CFR_Exclusion (readuncommitted) e ON em.ExclusionID = e.ID
where ruleid = 214
*/
	SELECT DISTINCT em.MVDID
	  FROM CFR_Rule_Exclusion re
	  JOIN HPWorkFlowRule wfr ON wfr.Rule_ID = re.RuleID
	  JOIN CFR_ExcludedMVDID em ON em.ExclusionID = re.ExclusionID
	  JOIN CFR_Exclusion e ON em.ExclusionID = e.ID
	 WHERE wfr.Name = 'SUD with Depression and no Cancer';

	 CREATE INDEX IX_ExcludedMVIDID ON #ExcludedMVDID (MVDID);

-- accounts for more than 1 ER visit
-- accounts for having a New Directions benefit
	SELECT
		FCH.MVDID,
		COUNT(DISTINCT StatementFromDate) ERCount
	INTO
		#ERVisit
	FROM
		finalclaimsheader (readuncommitted) FCH
		JOIN ComputedCareQueue (readuncommitted) CCQ
			on CCQ.MVDID = FCH.MVDID
			AND CCQ.IsActive = 1 -- must currently be enrolled in plan
-- does not currently have a medical / SW case manager assigned
			AND ISNULL(CCQ.CaseOwner,'--') = '--'
		JOIN FinalMember (readuncommitted) FM
			on FM.MVDID = CCQ.MVDID
			AND ISNULL(FM.CompanyKey,'0000') != '1338' -- not assigned to ABCBS employee company
			AND ISNULL(FM.COBCD,'U') IN ('S','N','U') -- has primary coverage by ABCBS
			AND FM.GrpInitvCd != 'GRD' -- exclude members associated to Grand Rounds
			AND FM.NewDirSvcCd in ('CM','UMCM','UM') -- Serviced by New Directions
		LEFT JOIN ComputedMemberAlert (readuncommitted) CA on CA.MVDID = CCQ.MVDID
		LEFT JOIN #ExcludedMVDID EM ON EM.MVDID = CCQ.MVDID
	WHERE
		DATEDIFF( DAY, StatementFromDate, GetUTCDate() ) <= 365 -- rolling 12 month lookback
		AND ISNULL(EmergencyIndicator,0) = 1 -- include only ER visits per EBI definition
		AND ISNULL(AdjustmentCode,'O') != 'A' -- ignore adjustement claims
		AND ISNULL(CA.PersonalHarm,0) = 0 -- no Personal Harm / no contact alert
/*
		AND NOT EXISTS
		(SELECT 1 FROM #ExcludedMVDID WHERE MVDID = CCQ.MVDID) -- not in an excluded company for benefits
*/
		--AND EM.MVDID IS NULL
	GROUP BY
		FCH.MVDID
	HAVING
		COUNT(DISTINCT StatementFromDate) > 1;

	DROP TABLE IF EXISTS #NDBHMember;

	CREATE TABLE
	#NDBHMember
	(
		MVDID varchar(30),
		MemberID varchar(30),
		MemberLastName varchar(255),
		MemberFirstName varchar(255),
		DateOfBirth date,
		Gender varchar(10),
		CMOrgRegion varchar(255),
		ERCount int,
		Category varchar(255)
	);

	--INSERT INTO
	--#NDBHMember
	--(
	--	MVDID,
	--	MemberID,
	--	MemberLastName,
	--	MemberFirstName,
	--	DateOfBirth,
	--	Gender,
	--	CMOrgRegion,
	--	ERCount,
	--	Category
	--)
-- 1-Panic d/o & Anxiety disorders + 2,3,4 & 5 or more ER visits (does not have to be primary dx)


select distinct HC.MVDID, FM.MemberID, FM.MemberLastName,FM.MemberFirstName, FM.DateOfBirth,FM.Gender, FM.CmOrgRegion, ER.ErCount,ND.Category
from FinalClaimsHeaderCode HC
join FinalClaimsHeader H on H.ClaimNumber = HC.ClaimNumber and H.MVDID = HC.MVDID
join FinalMember FM on FM.MVDID = HC.MVDID
join #ERVisit ER on ER. MVDID = HC.MVDID
join ABCBS_NDBHDiagnosis ND on HC.CodeValue = ND.Dx_Codes
where
DATEDIFF( DAY, H.StatementFromDate, GetUTCDate() ) <= 365 -- just claims in rolling 12 months
AND ND.Category = 'Panic d/o & Anxiety disorders'
--and HC.CodeType = 'DIAG' -- Look for Diagnosis codes
--and HC.CodeValue in
--(
--'F40','F400','F4000','F4001','F4002','F401','F4010','F4011','F402','F4021','F40210','F40218','F4022','F40220','F40228','F4023','F40230','F40231',
--'F40232','F40233','F4024','F40240','F40241','F40242','F40243','F40248','F4029','F40290','F40291','F40298','F408','F409','F41','F410','F411','F413',
--'F418','F419','F42','F422','F423','F424','F428','F429')
--9210
--59sec
/*
select distinct HC.MVDID, FM.MemberID, FM.MemberLastName,FM.MemberFirstName, FM.DateOfBirth,FM.Gender, FM.CmOrgRegion, ER.ErCount,'Panic d/o & Anxiety disorders' as Category
from FinalClaimsHeaderCode HC
join FinalClaimsHeader H on H.ClaimNumber = HC.ClaimNumber and H.MVDID = HC.MVDID
join FinalMember FM on FM.MVDID = HC.MVDID
join #ERVisit ER on ER. MVDID = HC.MVDID
where
DATEDIFF( DAY, H.StatementFromDate, GetUTCDate() ) <= 365 -- just claims in rolling 12 months
and HC.CodeType = 'DIAG' -- Look for Diagnosis codes
and HC.CodeValue in
(
'F40','F400','F4000','F4001','F4002','F401','F4010','F4011','F402','F4021','F40210','F40218','F4022','F40220','F40228','F4023','F40230','F40231',
'F40232','F40233','F4024','F40240','F40241','F40242','F40243','F40248','F4029','F40290','F40291','F40298','F408','F409','F41','F410','F411','F413',
'F418','F419','F42','F422','F423','F424','F428','F429')
AND FM.MemberID = 'M6148973002'
--9210
--1min20sec
*/

union

-- 2-Axis 2 personality disorders (Borderline PD or Dependent PD) + 2,3,4 & 5 or more ER visits (does not have to be primary dx)
select distinct HC.MVDID, FM.MemberID, FM.MemberLastName,FM.MemberFirstName, FM.DateOfBirth,FM.Gender, FM.CmOrgRegion,ER.ErCount,ND.Category
from FinalClaimsHeaderCode HC
join FinalClaimsHeader H on H.ClaimNumber = HC.ClaimNumber and H.MVDID = HC.MVDID
join FinalMember FM on FM.MVDID = HC.MVDID
join #ERVisit ER on ER. MVDID = HC.MVDID
join ABCBS_NDBHDiagnosis ND on HC.CodeValue = ND.Dx_Codes
where
DATEDIFF( DAY, H.StatementFromDate, GetUTCDate() ) <= 365 -- just claims in rolling 12 months
AND ND.Category = 'Axis 2 personality disorders'
--and HC.CodeType = 'DIAG' -- Look for Diagnosis codes
--and HC.CodeValue in
--(
----'F60','F600','F601','F602','F603','F604','F605','F606','F607','F608','F6081','F6089','F609'
--)

union

-- 3-Bipolar d/o +2,3,4 & 5 or more ER visits (does not have to be primary dx)
select distinct HC.MVDID, FM.MemberID, FM.MemberLastName,FM.MemberFirstName, FM.DateOfBirth,FM.Gender, FM.CmOrgRegion,ER.ErCount,ND.Category
from FinalClaimsHeaderCode HC
join FinalClaimsHeader H on H.ClaimNumber = HC.ClaimNumber and H.MVDID = HC.MVDID
join FinalMember FM on FM.MVDID = HC.MVDID
join #ERVisit ER on ER. MVDID = HC.MVDID
join ABCBS_NDBHDiagnosis ND on HC.CodeValue = ND.Dx_Codes
where
DATEDIFF( DAY, H.StatementFromDate, GetUTCDate() ) <= 365 -- just claims in rolling 12 months
AND ND.Category = 'Bipolar d/o'
--and HC.CodeType = 'DIAG' -- Look for Diagnosis codes
--and HC.CodeValue in
--(
----'F30','F301','F3010','F3011','F3012','F3013','F302','F303','F304','F308','F309','F31','F310','F311','F3110','F3111','F3112','F3113','F312','F313',
----'F3130','F3131','F3132','F314','F315','F316','F3160','F3161','F3162','F3163','F3164','F317','F3170','F3171','F3172','F3173','F3174','F3175','F3176',
----'F3177','F3178','F318','F3181','F3189','F319'
--)

union

-- 4-Schizophrenia + 2,3,4 & 5 or more ER visits (does not have to be primary dx)
select distinct HC.MVDID, FM.MemberID, FM.MemberLastName,FM.MemberFirstName, FM.DateOfBirth,FM.Gender, FM.CmOrgRegion,ER.ErCount, ND.Category
from FinalClaimsHeaderCode HC
join FinalClaimsHeader H on H.ClaimNumber = HC.ClaimNumber and H.MVDID = HC.MVDID
join FinalMember FM on FM.MVDID = HC.MVDID
join #ERVisit ER on ER. MVDID = HC.MVDID
join ABCBS_NDBHDiagnosis ND on HC.CodeValue = ND.Dx_Codes
where
DATEDIFF( DAY, H.StatementFromDate, GetUTCDate() ) <= 365 -- just claims in rolling 12 months
AND ND.Category = 'Schizophrenia'
--and HC.CodeType = 'DIAG' -- Look for Diagnosis codes
--and HC.CodeValue in
--(
----'F20','F200','F201','F202','F203','F205','F208','F2081','F2089','F209'
--)

union

-- 5-Suicidology + 2,3,4 & 5 or more ER visits (does not have to be primary dx)
select distinct HC.MVDID, FM.MemberID, FM.MemberLastName,FM.MemberFirstName, FM.DateOfBirth,FM.Gender, FM.CmOrgRegion,ER.ErCount,ND.Category
from FinalClaimsHeaderCode HC
join FinalClaimsHeader H on H.ClaimNumber = HC.ClaimNumber and H.MVDID = HC.MVDID
join FinalMember FM on FM.MVDID = HC.MVDID
join #ERVisit ER on ER. MVDID = HC.MVDID
join ABCBS_NDBHDiagnosis ND on HC.CodeValue = ND.Dx_Codes
where
DATEDIFF( DAY, H.StatementFromDate, GetUTCDate() ) <= 365 -- just claims in rolling 12 months
AND ND.Category = 'Suicidology' 
--and HC.CodeType = 'DIAG' -- Look for Diagnosis codes
--and HC.CodeValue in
--(
----'R45851', 'T1491','T1491XA','T1491XD','T1491XS','T360X2A','T360X2D','T360X2S','T361X2A','T361X2D','T361X2S','T362X2A','T362X2D','T362X2S','T363X2A','T363X2D','T363X2S','T364X2A',
----'T364X2D','T364X2S','T365X2A','T365X2D','T365X2S','T366X2A','T366X2D','T366X2S','T367X2A','T367X2D','T367X2S','T368X2A','T368X2D','T368X2S','T3692XA','T3692XD','T3692XS','T370X2A',
----'T370X2D','T370X2S','T371X2A','T371X2D','T371X2S','T372X2A','T372X2D','T372X2S','T373X2A','T373X2D','T373X2S','T374X2A','T374X2D','T374X2S','T375X2A','T375X2D','T375X2S','T378X2A',
----'T378X2D','T378X2S','T3792XA','T3792XD','T3792XS','T380X2A','T380X2D','T380X2S','T381X2A','T381X2D','T381X2S','T382X2A','T382X2D','T382X2S','T383X2A','T383X2D','T383X2S','T384X2A',
----'T384X2D','T384X2S','T385X2A','T385X2D','T385X2S','T386X2A','T386X2D','T386X2S','T387X2A','T387X2D','T387X2S','T38802A','T38802D','T38802S','T38812A','T38812D','T38812S','T38892A',
----'T38892D','T38892S','T38902A','T38902D','T38902S','T38992A','T38992D','T38992S','T39012A','T39012D','T39012S','T39092A','T39092D','T39092S','T391X2A','T391X2D','T391X2S','T392X2A',
----'T392X2D','T392X2S','T39312A','T39312D','T39312S','T39392A','T39392D','T39392S','T394X2A','T394X2D','T394X2S','T398X2A','T398X2D','T398X2S','T3992XA','T3992XD','T3992XS','T400X2A',
----'T400X2D','T400X2S','T401X2A','T401X2D','T401X2S','T402X2A','T402X2D','T402X2S','T403X2A','T403X2D','T403X2S','T404X2A','T404X2D','T404X2S','T405X2A','T405X2D','T405X2S','T40602A',
----'T40602D','T40602S','T40692A','T40692D','T40692S','T407X2A','T407X2D','T407X2S','T408X2A','T408X2D','T408X2S','T40902A','T40902D','T40902S','T40992A','T40992D','T40992S','T410X2A',
----'T410X2D','T410X2S','T411X2A','T411X2D','T411X2S','T41202A','T41202D','T41202S','T41292A','T41292D','T41292S','T413X2A','T413X2D','T413X2S','T4142XA','T4142XD','T4142XS','T415X2A',
----'T415X2D','T415X2S','T420X2A','T420X2D','T420X2S','T421X2A','T421X2D','T421X2S','T422X2A','T422X2D','T422X2S','T423X2A','T423X2D','T423X2S','T424X2A','T424X2D','T424X2S','T425X2A',
----'T425X2D','T425X2S','T426X2A','T426X2D','T426X2S','T4272XA','T4272XD','T4272XS','T428X2A','T428X2D','T428X2S','T43012A','T43012D','T43012S','T43022A','T43022D','T43022S','T431X2A',
----'T431X2D','T431X2S','T43202A','T43202D','T43202S','T43212A','T43212D','T43212S','T43222A','T43222D','T43222S','T43292A','T43292D','T43292S','T433X2A','T433X2D','T433X2S','T434X2A',
----'T434X2D','T434X2S','T43502A','T43502D','T43502S','T43592A','T43592D','T43592S','T43602A','T43602D','T43602S','T43612A','T43612D','T43612S','T43622A','T43622D','T43622S','T43632A',
----'T43632D','T43632S','T43692A','T43692D','T43692S','T438X2A','T438X2D','T438X2S','T4392XA','T4392XD','T4392XS','T440X2A','T440X2D','T440X2S','T441X2A','T441X2D','T441X2S','T442X2A',
----'T442X2D','T442X2S','T443X2A','T443X2D','T443X2S','T444X2A','T444X2D','T444X2S','T445X2A','T445X2D','T445X2S','T446X2A','T446X2D','T446X2S','T447X2A','T447X2D','T447X2S','T448X2A',
----'T448X2D','T448X2S','T44902A','T44902D','T44902S','T44992A','T44992D','T44992S','T450X2A','T450X2D','T450X2S','T451X2A','T451X2D','T451X2S','T452X2A','T452X2D','T452X2S','T453X2A',
----'T453X2D','T453X2S','T454X2A','T454X2D','T454X2S','T45512A','T45512D','T45512S','T45522A','T45522D','T45522S','T45602A','T45602D','T45602S','T45612A','T45612D','T45612S','T45622A',
----'T45622D','T45622S','T45692A','T45692D','T45692S','T457X2A','T457X2D','T457X2S','T458X2A','T458X2D','T458X2S','T4592XA','T4592XD','T4592XS','T460X2A','T460X2D','T460X2S','T461X2A',
----'T461X2D','T461X2S','T462X2A','T462X2D','T462X2S','T463X2A','T463X2D','T463X2S','T464X2A','T464X2D','T464X2S','T465X2A','T465X2D','T465X2S','T466X2A','T466X2D','T466X2S','T467X2A',
----'T467X2D','T467X2S','T468X2A','T468X2D','T468X2S','T46902A','T46902D','T46902S','T46992A','T46992D','T46992S','T470X2A','T470X2D','T470X2S','T471X2A','T471X2D','T471X2S','T472X2A',
----'T472X2D','T472X2S','T473X2A','T473X2D','T473X2S','T474X2A','T474X2D','T474X2S','T475X2A','T475X2D','T475X2S','T476X2A','T476X2D','T476X2S','T477X2A','T477X2D','T477X2S','T478X2A',
----'T478X2D','T478X2S','T4792XA','T4792XD','T4792XS','T480X2A','T480X2D','T480X2S','T481X2A','T481X2D','T481X2S','T48202A','T48202D','T48202S','T48292A','T48292D','T48292S','T483X2A',
----'T483X2D','T483X2S','T484X2A','T484X2D','T484X2S','T485X2A','T485X2D','T485X2S','T486X2A','T486X2D','T486X2S','T48902A','T48902D','T48902S','T48992A','T48992D','T48992S','T490X2A',
----'T490X2D','T490X2S','T491X2A','T491X2D','T491X2S','T492X2A','T492X2D','T492X2S','T493X2A','T493X2D','T493X2S','T494X2A','T494X2D','T494X2S','T495X2A','T495X2D','T495X2S','T496X2A',
----'T496X2D','T496X2S','T497X2A','T497X2D','T497X2S','T498X2A','T498X2D','T498X2S','T4992XA','T4992XD','T4992XS','T500X2A','T500X2D','T500X2S','T501X2A','T501X2D','T501X2S','T502X2A',
----'T502X2D','T502X2S','T503X2A','T503X2D','T503X2S','T504X2A','T504X2D','T504X2S','T505X2A','T505X2D','T505X2S','T506X2A','T506X2D','T506X2S','T507X2A','T507X2D','T507X2S','T508X2A',
----'T508X2D','T508X2S','T50902A','T50902D','T50902S','T50992A','T50992D','T50992S','T50A12A','T50A12D','T50A12S','T50A22A','T50A22D','T50A22S','T50A92A','T50A92D','T50A92S','T50B12A',
----'T50B12D','T50B12S','T50B92A','T50B92D','T50B92S','T50Z12A','T50Z12D','T50Z12S','T50Z92A','T50Z92D','T50Z92S','T510X2A','T510X2D','T510X2S','T511X2A','T511X2D','T511X2S','T512X2A',
----'T512X2D','T512X2S','T513X2A','T513X2D','T513X2S','T518X2A','T518X2D','T518X2S','T5192XA','T5192XD','T5192XS','T520X2A','T520X2D','T520X2S','T521X2A','T521X2D','T521X2S','T522X2A',
----'T522X2D','T522X2S','T523X2A','T523X2D','T523X2S','T524X2A','T524X2D','T524X2S','T528X2A','T528X2D','T528X2S','T5292XA','T5292XD','T5292XS','T530X2A','T530X2D','T530X2S','T531X2A',
----'T531X2D','T531X2S','T532X2A','T532X2D','T532X2S','T533X2A','T533X2D','T533X2S','T534X2A','T534X2D','T534X2S','T535X2A','T535X2D','T535X2S','T536X2A','T536X2D','T536X2S','T537X2A',
----'T537X2D','T537X2S','T5392XA','T5392XD','T5392XS','T540X2A','T540X2D','T540X2S','T541X2A','T541X2D','T541X2S','T542X2A','T542X2D','T542X2S','T543X2A','T543X2D','T543X2S','T5492XA',
----'T5492XD','T5492XS','T550X2A','T550X2D','T550X2S','T551X2A','T551X2D','T551X2S','T560X2A','T560X2D','T560X2S','T561X2A','T561X2D','T561X2S','T562X2A','T562X2D','T562X2S','T563X2A',
----'T563X2D','T563X2S','T564X2A','T564X2D','T564X2S','T565X2A','T565X2D','T565X2S','T566X2A','T566X2D','T566X2S','T567X2A','T567X2D','T567X2S','T56812A','T56812D','T56812S','T56892A',
----'T56892D','T56892S','T5692XA','T5692XD','T5692XS','T570X2A','T570X2D','T570X2S','T571X2A','T571X2D','T571X2S','T572X2A','T572X2D','T572X2S','T573X2A','T573X2D','T573X2S','T578X2A',
----'T578X2D','T578X2S','T5792XA','T5792XD','T5792XS','T5802XA','T5802XD','T5802XS','T5812XA','T5812XD','T5812XS','T582X2A','T582X2D','T582X2S','T588X2A','T588X2D','T588X2S','T5892XA',
----'T5892XD','T5892XS','T590X2A','T590X2D','T590X2S','T591X2A','T591X2D','T591X2S','T592X2A','T592X2D','T592X2S','T593X2A','T593X2D','T593X2S','T594X2A','T594X2D','T594X2S','T595X2A',
----'T595X2D','T595X2S','T596X2A','T596X2D','T596X2S','T597X2A','T597X2D','T597X2S','T59812A','T59812D','T59812S','T59892A','T59892D','T59892S','T5992XA','T5992XD','T5992XS','T600X2A',
----'T600X2D','T600X2S','T601X2A','T601X2D','T601X2S','T602X2A','T602X2D','T602X2S','T603X2A','T603X2D','T603X2S','T604X2A','T604X2D','T604X2S','T608X2A','T608X2D','T608X2S','T6092XA',
----'T6092XD','T6092XS','T6102XA','T6102XD','T6102XS','T6112XA','T6112XD','T6112XS','T61772A','T61772D','T61772S','T61782A','T61782D','T61782S','T618X2A','T618X2D','T618X2S','T6192XA',
----'T6192XD','T6192XS','T620X2A','T620X2D','T620X2S','T621X2A','T621X2D','T621X2S','T622X2A','T622X2D','T622X2S','T628X2A','T628X2D','T628X2S','T6292XA','T6292XD','T6292XS','T63002A',
----'T63002D','T63002S','T63012A','T63012D','T63012S','T63022A','T63022D','T63022S','T63032A','T63032D','T63032S','T63042A','T63042D','T63042S','T63062A','T63062D','T63062S','T63072A',
----'T63072D','T63072S','T63082A','T63082D','T63082S','T63092A','T63092D','T63092S','T63112A','T63112D','T63112S','T63122A','T63122D','T63122S','T63192A','T63192D','T63192S','T632X2A',
----'T632X2D','T632X2S','T63302A','T63302D','T63302S','T63312A','T63312D','T63312S','T63322A','T63322D','T63322S','T63332A','T63332D','T63332S','T63392A','T63392D','T63392S','T63412A',
----'T63412D','T63412S','T63422A','T63422D','T63422S','T63432A','T63432D','T63432S','T63442A','T63442D','T63442S','T63452A','T63452D','T63452S','T63462A','T63462D','T63462S','T63482A',
----'T63482D','T63482S','T63512A','T63512D','T63512S','T63592A','T63592D','T63592S','T63612A','T63612D','T63612S','T63622A','T63622D','T63622S','T63632A','T63632D','T63632S','T63692A',
----'T63692D','T63692S','T63712A','T63712D','T63712S','T63792A','T63792D','T63792S','T63812A','T63812D','T63812S','T63822A','T63822D','T63822S','T63832A','T63832D','T63832S','T63892A',
----'T63892D','T63892S','T6392XA','T6392XD','T6392XS','T6402XA','T6402XD','T6402XS','T6482XA','T6482XD','T6482XS','T650X2A','T650X2D','T650X2S','T651X2A','T651X2D','T651X2S','T65212A',
----'T65212D','T65212S','T65222A','T65222D','T65222S','T65292A','T65292D','T65292S','T653X2A','T653X2D','T653X2S','T654X2A','T654X2D','T654X2S','T655X2A','T655X2D','T655X2S','T656X2A',
----'T656X2D','T656X2S','T65812A','T65812D','T65812S','T65822A','T65822D','T65822S','T65832A','T65832D','T65832S','T65892A','T65892D','T65892S','T6592XA','T6592XD','T6592XS','T71112A',
----'T71112D','T71112S','T71122A','T71122D','T71122S','T71132A','T71132D','T71132S','T71152A','T71152D','T71152S','T71162A','T71162D','T71162S','T71192A','T71192D','T71192S','T71222A',
----'T71222D','T71222S','T71232A','T71232D','T71232S','X710XXA','X710XXD','X710XXS','X711XXA','X711XXD','X711XXS','X712XXA','X712XXD','X712XXS','X713XXA','X713XXD','X713XXS','X718XXA',
----'X718XXD','X718XXS','X719XXA','X719XXD','X719XXS','X72XXXA','X72XXXD','X72XXXS','X730XXA','X730XXD','X730XXS','X731XXA','X731XXD','X731XXS','X732XXA','X732XXD','X732XXS','X738XXA',
----'X738XXD','X738XXS','X739XXA','X739XXD','X739XXS','X7401XA','X7401XD','X7401XS','X7402XA','X7402XD','X7402XS','X7409XA','X7409XD','X7409XS','X748XXA','X748XXD','X748XXS','X749XXA',
----'X749XXD','X749XXS','X75XXXA','X75XXXD','X75XXXS','X76XXXA','X76XXXD','X76XXXS','X770XXA','X770XXD','X770XXS','X771XXA','X771XXD','X771XXS','X772XXA','X772XXD','X772XXS','X773XXA',
----'X773XXD','X773XXS','X778XXA','X778XXD','X778XXS','X779XXA','X779XXD','X779XXS','X780XXA','X780XXD','X780XXS','X781XXA','X781XXD','X781XXS','X782XXA','X782XXD','X782XXS','X788XXA',
----'X788XXD','X788XXS','X789XXA','X789XXD','X789XXS','X79XXXA','X79XXXD','X79XXXS','X80XXXA','X80XXXD','X80XXXS','X810XXA','X810XXD','X810XXS','X811XXA','X811XXD','X811XXS','X818XXA',
----'X818XXD','X818XXS','X820XXA','X820XXD','X820XXS','X821XXA','X821XXD','X821XXS','X822XXA','X822XXD','X822XXS','X828XXA','X828XXD','X828XXS','X830XXA','X830XXD','X830XXS','X831XXA',
----'X831XXD','X831XXS','X832XXA','X832XXD','X832XXS','X838XXA','X838XXD','X838XXS','Z915'
--)

union

-- 6-Eating d/o and 2,3,4 & 5 or more ER visits (does not have to be primary dx)
select distinct HC.MVDID, FM.MemberID, FM.MemberLastName,FM.MemberFirstName, FM.DateOfBirth,FM.Gender, FM.CmOrgRegion,ER.ErCount,ND.Category
from FinalClaimsHeaderCode HC
join FinalClaimsHeader H on H.ClaimNumber = HC.ClaimNumber and H.MVDID = HC.MVDID
join FinalMember FM on FM.MVDID = HC.MVDID
join #ERVisit ER on ER. MVDID = HC.MVDID
join ABCBS_NDBHDiagnosis ND on HC.CodeValue = ND.Dx_Codes
where
DATEDIFF( DAY, H.StatementFromDate, GetUTCDate() ) <= 365 -- just claims in rolling 12 months
AND ND.Category = 'Eating d/o'  
--and HC.CodeType = 'DIAG' -- Look for Diagnosis codes
--and HC.CodeValue in
--(
----'F50','F500','F5000','F5001','F5002','F502','F508','F5081','F5082','F5089','F509'
--)

union

-- 7-SUD dx and 2,3,4 & 5 or more ER visits (does not have to be primary dx)
select distinct HC.MVDID, FM.MemberID, FM.MemberLastName,FM.MemberFirstName, FM.DateOfBirth,FM.Gender, FM.CmOrgRegion,ER.ErCount,ND.Category
from FinalClaimsHeaderCode HC
join FinalClaimsHeader H on H.ClaimNumber = HC.ClaimNumber and H.MVDID = HC.MVDID
join FinalMember FM on FM.MVDID = HC.MVDID
join #ERVisit ER on ER. MVDID = HC.MVDID
join ABCBS_NDBHDiagnosis ND on HC.CodeValue = ND.Dx_Codes
where
DATEDIFF( DAY, H.StatementFromDate, GetUTCDate() ) <= 365 -- just claims in rolling 12 months
AND ND.Category = 'SUD dx' 
--and HC.CodeType = 'DIAG' -- Look for Diagnosis codes
--and HC.CodeValue in
--(
----'F10','F1010','F1011','F1012','F10120','F10121','F10129','F1014','F1015','F10150','F10151','F10159','F1018','F10180','F10181','F10182','F10188','F1019','F102','F1020','F1021','F1022',
----'F10220','F10221','F10229','F1023','F10230','F10231','F10232','F10239','F1024','F1025','F10250','F10251','F10259','F1026','F1027','F1028','F10280','F10281','F10282','F10288','F1029',
----'F109','F1092','F10920','F10921','F10929','F1094','F1095','F10950','F10951','F10959','F1096','F1097','F1098','F10980','F10981','F10982','F10988','F1099','F11','F111','F1110','F1111',
----'F1112','F11120','F11121','F11122','F11129','F1114','F1115','F11150','F11151','F11159','F1118','F11181','F11182','F11188','F1119','F112','F1120','F1121','F1122','F11220','F11221','F11222',
----'F11229','F1123','F1124','F1125','F11250','F11251','F11259','F1128','F11281','F11282','F11288','F1129','F119','F1190','F1192','F11920','F11921','F11922','F11929','F1193','F1194','F1195',
----'F11950','F11951','F11959','F1198','F11981','F11982','F11988','F1199','F12','F121','F1210','F1211','F1212','F12120','F12121','F12122','F12129','F1215','F12150','F12151','F12159','F1218',
----'F12180','F12188','F1219','F122','F1220','F1221','F1222','F12220','F12221','F12222','F12229','F1225','F12250','F12251','F12259','F1228','F12280','F12288','F1229','F129','F1290','F1292',
----'F12920','F12921','F12922','F12929','F1295','F12950','F12951','F12959','F1298','F12980','F12988','F1299','F13','F131','F1310','F1311','F1312','F13120','F13121','F13129','F1314','F1315',
----'F13150','F13151','F13159','F1318','F13180','F13181','F13182','F13188','F1319','F132','F1320','F1321','F1322','F13220','F13221','F13229','F1323','F13230','F13231','F13232','F13239','F1324',
----'F1325','F13250','F13251','F13259','F1326','F1327','F1328','F13280','F13281','F13282','F13288','F1329','F139','F1390','F1392','F13920','F13921','F13929','F1393','F13930','F13931','F13932',
----'F13939','F1394','F1395','F13950','F13951','F13959','F1396','F1397','F1398','F13980','F13981','F13982','F13988','F1399','F14','F141','F1410','F1411','F1412','F14120','F14121','F14122','F14129',
----'F1414','F1415','F14150','F14151','F14159','F1418','F14180','F14181','F14182','F14188','F1419','F142','F1420','F1421','F1422','F14220','F14221','F14222','F14229','F1423','F1424','F1425','F14250',
----'F14251','F14259','F1428','F14280','F14281','F14282','F14288','F1429','F149','F1490','F1492','F14920','F14921','F14922','F14929','F1494','F1495','F14950','F14951','F14959','F1498','F14980',
----'F14981','F14982','F14988','F1499','F15','F151','F1510','F1511','F1512','F15120','F15121','F15122','F15129','F1514','F1515','F15150','F15151','F15159','F1518','F15180','F15181','F15182',
----'F15188','F1519','F152','F1520','F1521','F1522','F15220','F15221','F15222','F15229','F1523','F1524','F1525','F15250','F15251','F15259','F1528','F15280','F15281','F15282','F15288','F1529','F159',
----'F1590','F1592','F15920','F15921','F15922','F15929','F1593','F1594','F1595','F15950','F15951','F15959','F1598','F15980','F15981','F15982','F15988','F1599','F16','F161','F1610','F1611','F1612',
----'F16120','F16121','F16122','F16129','F1614','F1615','F16150','F16151','F16159','F1618','F16180','F16183','F16188','F1619','F162','F1620','F1621','F1622','F16220','F16221','F16229','F1624','F1625',
----'F16250','F16251','F16259','F1628','F16280','F16283','F16288','F1629','F169','F1690','F1692','F16920','F16921','F16929','F1694','F1695','F16950','F16951','F16959','F1698','F16980','F16983',
----'F16988','F1699','F18','F181','F1810','F1811','F1812','F18120','F18121','F18129','F1814','F1815','F18150','F18151','F18159','F1817','F1818','F18180','F18188','F1819','F182','F1820','F1821',
----'F1822','F18220','F18221','F18229','F1824','F1825','F18250','F18251','F18259','F1827','F1828','F18280','F18288','F1829','F189','F1890','F1892','F18920','F18921','F18929','F1894','F1895','F18950',
----'F18951','F18959','F1897','F1898','F18980','F18988','F1899','F19','F191','F1910','F1911','F1912','F19120','F19121','F19122','F19129','F1914','F1915','F19150','F19151','F19159','F1916','F1917',
----'F1918','F19180','F19181','F19182','F19188','F1919','F192','F1920','F1921','F1922','F19220','F19221','F19222','F19229','F1923','F19230','F19231','F19232','F19239','F1924','F1925','F19250','F19251','F19259',
----'F1926','F1927','F1928','F19280','F19281','F19282','F19288','F1929','F199','F1990','F1992','F19920','F19921','F19922','F19929','F1993','F19930','F19931','F19932','F19939','F1994','F1995','F19950',
----'F19951','F19959','F1996','F1997','F1998','F19980','F19981','F19982','F19988','F1999'
--)

union

select distinct HC.MVDID, FM.MemberID, FM.MemberLastName,FM.MemberFirstName, FM.DateOfBirth,FM.Gender, FM.CmOrgRegion,ER.ErCount, ND.Category
from FinalClaimsHeaderCode HC
join FinalClaimsHeader H on H.ClaimNumber = HC.ClaimNumber and H.MVDID = HC.MVDID
join FinalMember FM on FM.MVDID = HC.MVDID
join #ERVisit ER on ER. MVDID = HC.MVDID
join ABCBS_NDBHDiagnosis ND on HC.CodeValue = ND.Dx_Codes
where
DATEDIFF( DAY, H.StatementFromDate, GetUTCDate() ) <= 365 -- just claims in rolling 12 months
and IsNull(HC.PrimaryIndicator,'N') = 'Y'
AND ND.Category = 'ED visits with any primary BH dx'
--and HC.CodeType = 'DIAG' -- Look for Diagnosis codes
--and HC.CodeValue in
--(
----'F0781','F0789','F079','F09','F10','F1010','F1011','F1012','F10120','F10121','F10129','F1014','F1015','F10150','F10151','F10159','F1018','F10180','F10181','F10182','F10188','F1019',
----'F102','F1020','F1021','F1022','F10220','F10221','F10229','F1023','F10230','F10231','F10232','F10239','F1024','F1025','F10250','F10251','F10259','F1026','F1027','F1028','F10280','F10281',
----'F10282','F10288','F1029','F109','F1092','F10920','F10921','F10929','F1094','F1095','F10950','F10951','F10959','F1096','F1097','F1098','F10980','F10981','F10982','F10988','F1099','F11',
----'F111','F1110','F1111','F1112','F11120','F11121','F11122','F11129','F1114','F1115','F11150','F11151','F11159','F1118','F11181','F11182','F11188','F1119','F112','F1120','F1121','F1122',
----'F11220','F11221','F11222','F11229','F1123','F1124','F1125','F11250','F11251','F11259','F1128','F11281','F11282','F11288','F1129','F119','F1190','F1192','F11920','F11921','F11922','F11929','F1193','F1194','F1195',
----'F11950','F11951','F11959','F1198','F11981','F11982','F11988','F1199','F12','F121','F1210','F1211','F1212','F12120','F12121','F12122','F12129','F1215','F12150','F12151','F12159','F1218',
----'F12180','F12188','F1219','F122','F1220','F1221','F1222','F12220','F12221','F12222','F12229','F1225','F12250','F12251','F12259','F1228','F12280','F12288','F1229','F129','F1290','F1292',
----'F12920','F12921','F12922','F12929','F1295','F12950','F12951','F12959','F1298','F12980','F12988','F1299','F13','F131','F1310','F1311','F1312','F13120','F13121','F13129','F1314','F1315',
----'F13150','F13151','F13159','F1318','F13180','F13181','F13182','F13188','F1319','F132','F1320','F1321','F1322','F13220','F13221','F13229','F1323','F13230','F13231','F13232','F13239','F1324',
----'F1325','F13250','F13251','F13259','F1326','F1327','F1328','F13280','F13281','F13282','F13288','F1329','F139','F1390','F1392','F13920','F13921','F13929','F1393','F13930','F13931','F13932',
----'F13939','F1394','F1395','F13950','F13951','F13959','F1396','F1397','F1398','F13980','F13981','F13982','F13988','F1399','F14','F141','F1410','F1411','F1412','F14120','F14121','F14122','F14129',
----'F1414','F1415','F14150','F14151','F14159','F1418','F14180','F14181','F14182','F14188','F1419','F142','F1420','F1421','F1422','F14220','F14221','F14222','F14229','F1423','F1424','F1425','F14250',
----'F14251','F14259','F1428','F14280','F14281','F14282','F14288','F1429','F149','F1490','F1492','F14920','F14921','F14922','F14929','F1494','F1495','F14950','F14951','F14959','F1498','F14980','F14981',
----'F14982','F14988','F1499','F15','F151','F1510','F1511','F1512','F15120','F15121','F15122','F15129','F1514','F1515','F15150','F15151','F15159','F1518','F15180','F15181','F15182','F15188','F1519','F152',
----'F1520','F1521','F1522','F15220','F15221','F15222','F15229','F1523','F1524','F1525','F15250','F15251','F15259','F1528','F15280','F15281','F15282','F15288','F1529','F159','F1590','F1592','F15920',
----'F15921','F15922','F15929','F1593','F1594','F1595','F15950','F15951','F15959','F1598','F15980','F15981','F15982','F15988','F1599','F16','F161','F1610','F1611','F1612','F16120','F16121','F16122',
----'F16129','F1614','F1615','F16150','F16151','F16159','F1618','F16180','F16183','F16188','F1619','F162','F1620','F1621','F1622','F16220','F16221','F16229','F1624','F1625','F16250','F16251','F16259',
----'F1628','F16280','F16283','F16288','F1629','F169','F1690','F1692','F16920','F16921','F16929','F1694','F1695','F16950','F16951','F16959','F1698','F16980','F16983','F16988','F1699','F18','F181','F1810',
----'F1811','F1812','F18120','F18121','F18129','F1814','F1815','F18150','F18151','F18159','F1817','F1818','F18180','F18188','F1819','F182','F1820','F1821','F1822','F18220','F18221','F18229','F1824',
----'F1825','F18250','F18251','F18259','F1827','F1828','F18280','F18288','F1829','F189','F1890','F1892','F18920','F18921','F18929','F1894','F1895','F18950','F18951','F18959','F1897','F1898','F18980',
----'F18988','F1899','F19','F191','F1910','F1911','F1912','F19120','F19121','F19122','F19129','F1914','F1915','F19150','F19151','F19159','F1916','F1917','F1918','F19180','F19181','F19182','F19188','F1919','F192',
----'F1920','F1921','F1922','F19220','F19221','F19222','F19229','F1923','F19230','F19231','F19232','F19239','F1924','F1925','F19250','F19251','F19259','F1926','F1927','F1928','F19280','F19281','F19282',
----'F19288','F1929','F199','F1990','F1992','F19920','F19921','F19922','F19929','F1993','F19930','F19931','F19932','F19939','F1994','F1995','F19950','F19951','F19959','F1996','F1997','F1998','F19980',
----'F19981','F19982','F19988','F1999','F20','F200','F201','F202','F203','F205','F208','F2081','F2089','F209','F21','F22','F23','F24','F25','F250','F251','F258','F259','F28','F29','F30','F301','F3010',
----'F3011','F3012','F3013','F302','F303','F304','F308','F309','F31','F310','F311','F3110','F3111','F3112','F3113','F312','F313','F3130','F3131','F3132','F314','F315','F316','F3160','F3161','F3162','F3163',
----'F3164','F317','F3170','F3171','F3172','F3173','F3174','F3175','F3176','F3177','F3178','F318','F3181','F3189','F319','F32','F320','F321','F322','F323','F324','F325','F328','F3281','F3289','F329','F33',
----'F330','F331','F332','F333','F334','F3340','F3341','F3342','F338','F339','F34','F340','F341','F348','F3481','F3489','F349','F39','F40','F400','F4000','F4001','F4002','F401','F4010','F4011','F402','F4021',
----'F40210','F40218','F4022','F40220','F40228','F4023','F40230','F40231','F40232','F40233','F4024','F40240','F40241','F40242','F40243','F40248','F4029','F40290','F40291','F40298','F408','F409','F41','F410',
----'F411','F413','F418','F419','F42','F422','F423','F424','F428','F429','F43','F430','F431','F4310','F4311','F4312','F432','F4320','F4321','F4322','F4323','F4324','F4325','F4329','F438','F439','F44','F440',
----'F441','F442','F444','F445','F446','F447','F448','F4481','F4489','F449','F45','F450','F451','F452','F4520','F4521','F4522','F4529','F454','F4541','F4542','F458','F459','F48','F481','F482','F488','F489',
----'F50','F500','F5000','F5001','F5002','F502','F508','F5081','F5082','F5089','F509','F52','F520','F521','F522','F5221','F5222','F523','F5231','F5232','F524','F525','F526','F528','F529','F53','F54','F55','F550',
----'F551','F552','F553','F554','F558','F59','F60','F600','F601','F602','F603','F604','F605','F606','F607','F608','F6081','F6089','F609','F63','F630','F631','F632','F633','F638','F6381','F6389','F639','F64','F640',
----'F641','F642','F648','F649','F65','F650','F651','F652','F653','F654','F655','F6550','F6551','F6552','F658','F6581','F6589','F659','F66','F68','F681','F6810','F6811','F6812','F6813','F688','F69','F8082','F82','F840',
----'F843','F845','F848','F849','F88','F89','F90','F900','F901','F902','F908','F909','F91','F910','F911','F912','F913','F918','F919','F93','F930','F938','F939','F94','F940','F941','F942','F948','F949','F98','F980',
----'F981','F9821','F9829','F983','F988','F989','F99','R45851','T1491','T1491XA','T1491XD','T1491XS','T360X2A','T360X2D','T360X2S','T361X2A','T361X2D','T361X2S','T362X2A','T362X2D','T362X2S','T363X2A','T363X2D',
----'T363X2S','T364X2A','T364X2D','T364X2S','T365X2A','T365X2D','T365X2S','T366X2A','T366X2D','T366X2S','T367X2A','T367X2D','T367X2S','T368X2A','T368X2D','T368X2S','T3692XA','T3692XD','T3692XS','T370X2A',
----'T370X2D','T370X2S','T371X2A','T371X2D','T371X2S','T372X2A','T372X2D','T372X2S','T373X2A','T373X2D','T373X2S','T374X2A','T374X2D','T374X2S','T375X2A','T375X2D','T375X2S','T378X2A','T378X2D','T378X2S',
----'T3792XA','T3792XD','T3792XS','T380X2A','T380X2D','T380X2S','T381X2A','T381X2D','T381X2S','T382X2A','T382X2D','T382X2S','T383X2A','T383X2D','T383X2S','T384X2A','T384X2D','T384X2S','T385X2A','T385X2D',
----'T385X2S','T386X2A','T386X2D','T386X2S','T387X2A','T387X2D','T387X2S','T38802A','T38802D','T38802S','T38812A','T38812D','T38812S','T38892A','T38892D','T38892S','T38902A','T38902D','T38902S','T38992A','T38992D',
----'T38992S','T39012A','T39012D','T39012S','T39092A','T39092D','T39092S','T391X2A','T391X2D','T391X2S','T392X2A','T392X2D','T392X2S','T39312A','T39312D','T39312S','T39392A','T39392D','T39392S','T394X2A',
----'T394X2D','T394X2S','T398X2A','T398X2D','T398X2S','T3992XA','T3992XD','T3992XS','T400X2A','T400X2D','T400X2S','T401X2A','T401X2D','T401X2S','T402X1A','T402X1D','T402X1S','T402X2A','T402X2D','T402X2S',
----'T402X4A','T402X4D','T402X4S','T403X1A','T403X1D','T403X1S','T403X2A','T403X2D','T403X2S','T403X4A','T403X4D','T403X4S','T404X1A','T404X1D','T404X1S','T404X2A','T404X2D','T404X2S','T404X4A','T404X4D',
----'T404X4S','T405X2A','T405X2D','T405X2S','T40601A','T40601D','T40601S','T40602A','T40602D','T40602S','T40604A','T40604D','T40604S','T40691A','T40691D','T40691S','T40692A','T40692D','T40692S','T40694A',
----'T40694D','T40694S','T407X2A','T407X2D','T407X2S','T408X2A','T408X2D','T408X2S','T40902A','T40902D','T40902S','T40992A','T40992D','T40992S','T410X2A','T410X2D','T410X2S','T411X2A','T411X2D','T411X2S',
----'T41202A','T41202D','T41202S','T41292A','T41292D','T41292S','T413X2A','T413X2D','T413X2S','T4142XA','T4142XD','T4142XS','T415X2A','T415X2D','T415X2S','T420X2A','T420X2D','T420X2S','T421X2A','T421X2D',
----'T421X2S','T422X2A','T422X2D','T422X2S','T423X1A','T423X1D','T423X1S','T423X2A','T423X2D','T423X2S','T423X4A','T423X4D','T423X4S','T424X1A','T424X1D','T424X1S','T424X2A','T424X2D','T424X2S','T424X4A',
----'T424X4D','T424X4S','T425X2A','T425X2D','T425X2S','T426X2A','T426X2D','T426X2S','T4272XA','T4272XD','T4272XS','T428X1A','T428X1D','T428X1S','T428X2A','T428X2D','T428X2S','T428X4A','T428X4D','T428X4S',
----'T43011A','T43011D','T43011S','T43012A','T43012D','T43012S','T43014A','T43014D','T43014S','T43021A','T43021D','T43021S','T43022A','T43022D','T43022S','T43024A','T43024D','T43024S','T431X1A','T431X1D',
----'T431X1S','T431X2A','T431X2D','T431X2S','T431X4A','T431X4D','T431X4S','T43201A','T43201D','T43201S','T43202A','T43202D','T43202S','T43204A','T43204D','T43204S','T43211A','T43211D','T43211S','T43212A',
----'T43212D','T43212S','T43214A','T43214D','T43214S','T43221A','T43221D','T43221S','T43222A','T43222D','T43222S','T43224A','T43224D','T43224S','T43291A','T43291D','T43291S','T43292A','T43292D','T43292S',
----'T43294A','T43294D','T43294S','T433X1A','T433X1D','T433X1S','T433X2A','T433X2D','T433X2S','T434X2A','T434X2D','T434X2S','T43501A','T43501D','T43501S','T43502A','T43502D','T43502S','T43504A','T43504D',
----'T43504S','T43591A','T43591D','T43591S','T43592A','T43592D','T43592S','T43594A','T43594D','T43594S','T43601A','T43601D','T43601S','T43602A','T43602D','T43602S','T43604A','T43604D','T43604S','T43612A',
----'T43612D','T43612S','T43621A','T43621D','T43621S','T43622A','T43622D','T43622S','T43624A','T43624D','T43624S','T43631A','T43631D','T43631S','T43632A','T43632D','T43632S','T43634A','T43634D','T43634S','T43641A',
----'T43641D','T43641S','T43642A','T43642D','T43642S','T43644A','T43644D','T43644S','T43691A','T43691D','T43691S','T43692A','T43692D','T43692S','T43694A','T43694D','T43694S','T438X2A','T438X2D','T438X2S',
----'T4392XA','T4392XD','T4392XS','T4394XA','T4394XD','T4394XS','T440X2A','T440X2D','T440X2S','T441X2A','T441X2D','T441X2S','T442X2A','T442X2D','T442X2S','T443X2A','T443X2D','T443X2S','T444X2A','T444X2D',
----'T444X2S','T445X2A','T445X2D','T445X2S','T446X2A','T446X2D','T446X2S','T447X2A','T447X2D','T447X2S','T448X2A','T448X2D','T448X2S','T44902A','T44902D','T44902S','T44992A','T44992D','T44992S','T450X2A',
----'T450X2D','T450X2S','T451X2A','T451X2D','T451X2S','T452X2A','T452X2D','T452X2S','T453X2A','T453X2D','T453X2S','T454X2A','T454X2D','T454X2S','T45512A','T45512D','T45512S','T45522A','T45522D','T45522S',
----'T45602A','T45602D','T45602S','T45612A','T45612D','T45612S','T45622A','T45622D','T45622S','T45692A','T45692D','T45692S','T457X2A','T457X2D','T457X2S','T458X2A','T458X2D','T458X2S','T4592XA','T4592XD','T4592XS',
----'T460X2A','T460X2D','T460X2S','T461X2A','T461X2D','T461X2S','T462X2A','T462X2D','T462X2S','T463X2A','T463X2D','T463X2S','T464X2A','T464X2D','T464X2S','T465X2A','T465X2D','T465X2S','T466X2A','T466X2D','T466X2S',
----'T467X2A','T467X2D','T467X2S','T468X2A','T468X2D','T468X2S','T46902A','T46902D','T46902S','T46992A','T46992D','T46992S','T470X2A','T470X2D','T470X2S','T471X2A','T471X2D','T471X2S','T472X2A','T472X2D',
----'T472X2S','T473X2A','T473X2D','T473X2S','T474X2A','T474X2D','T474X2S','T475X2A','T475X2D','T475X2S','T476X2A','T476X2D','T476X2S','T477X2A','T477X2D','T477X2S','T478X2A','T478X2D','T478X2S','T4792XA',
----'T4792XD','T4792XS','T480X2A','T480X2D','T480X2S','T481X2A','T481X2D','T481X2S','T48202A','T48202D','T48202S','T48292A','T48292D','T48292S','T483X2A','T483X2D','T483X2S','T484X2A','T484X2D','T484X2S',
----'T485X2A','T485X2D','T485X2S','T486X2A','T486X2D','T486X2S','T48902A','T48902D','T48902S','T48992A','T48992D','T48992S','T490X2A','T490X2D','T490X2S','T491X2A','T491X2D','T491X2S','T492X2A','T492X2D',
----'T492X2S','T493X2A','T493X2D','T493X2S','T494X2A','T494X2D','T494X2S','T495X2A','T495X2D','T495X2S','T496X2A','T496X2D','T496X2S','T497X2A','T497X2D','T497X2S','T498X2A','T498X2D','T498X2S','T4992XA',
----'T4992XD','T4992XS','T500X2A','T500X2D','T500X2S','T501X2A','T501X2D','T501X2S','T502X2A','T502X2D','T502X2S','T503X2A','T503X2D','T503X2S','T504X2A','T504X2D','T504X2S','T505X2A','T505X2D','T505X2S',
----'T506X2A','T506X2D','T506X2S','T507X2A','T507X2D','T507X2S','T508X2A','T508X2D','T508X2S','T50902A','T50902D','T50902S','T50992A','T50992D','T50992S','T50A12A','T50A12D','T50A12S','T50A22A','T50A22D',
----'T50A22S','T50A92A','T50A92D','T50A92S','T50B12A','T50B12D','T50B12S','T50B92A','T50B92D','T50B92S','T50Z12A','T50Z12D','T50Z12S','T50Z92A','T50Z92D','T50Z92S','T510X2A','T510X2D','T510X2S','T511X2A',
----'T511X2D','T511X2S','T512X2A','T512X2D','T512X2S','T513X2A','T513X2D','T513X2S','T518X2A','T518X2D','T518X2S','T5192XA','T5192XD','T5192XS','T520X2A','T520X2D','T520X2S','T521X2A','T521X2D','T521X2S',
----'T522X2A','T522X2D','T522X2S','T523X2A','T523X2D','T523X2S','T524X2A','T524X2D','T524X2S','T528X2A','T528X2D','T528X2S','T5292XA','T5292XD','T5292XS','T530X2A','T530X2D','T530X2S','T531X2A','T531X2D',
----'T531X2S','T532X2A','T532X2D','T532X2S','T533X2A','T533X2D','T533X2S','T534X2A','T534X2D','T534X2S','T535X2A','T535X2D','T535X2S','T536X2A','T536X2D','T536X2S','T537X2A','T537X2D','T537X2S','T5392XA',
----'T5392XD','T5392XS','T540X2A','T540X2D','T540X2S','T541X2A','T541X2D','T541X2S','T542X2A','T542X2D','T542X2S','T543X2A','T543X2D','T543X2S','T5492XA','T5492XD','T5492XS','T550X2A','T550X2D','T550X2S','T551X2A',
----'T551X2D','T551X2S','T560X2A','T560X2D','T560X2S','T561X2A','T561X2D','T561X2S','T562X2A','T562X2D','T562X2S','T563X2A','T563X2D','T563X2S','T564X2A','T564X2D','T564X2S','T565X2A','T565X2D','T565X2S',
----'T566X2A','T566X2D','T566X2S','T567X2A','T567X2D','T567X2S','T56812A','T56812D','T56812S','T56892A','T56892D','T56892S','T5692XA','T5692XD','T5692XS','T570X2A','T570X2D','T570X2S','T571X2A','T571X2D',
----'T571X2S','T572X2A','T572X2D','T572X2S','T573X2A','T573X2D','T573X2S','T578X2A','T578X2D','T578X2S','T5792XA','T5792XD','T5792XS','T5802XA','T5802XD','T5802XS','T5812XA','T5812XD','T5812XS','T582X2A',
----'T582X2D','T582X2S','T588X2A','T588X2D','T588X2S','T5892XA','T5892XD','T5892XS','T590X2A','T590X2D','T590X2S','T591X2A','T591X2D','T591X2S','T592X2A','T592X2D','T592X2S','T593X2A','T593X2D','T593X2S',
----'T594X2A','T594X2D','T594X2S','T595X2A','T595X2D','T595X2S','T596X2A','T596X2D','T596X2S','T597X2A','T597X2D','T597X2S','T59812A','T59812D','T59812S','T59892A','T59892D','T59892S','T5992XA','T5992XD','T5992XS',
----'T600X2A','T600X2D','T600X2S','T601X2A','T601X2D','T601X2S','T602X2A','T602X2D','T602X2S','T603X2A','T603X2D','T603X2S','T604X2A','T604X2D','T604X2S','T608X2A','T608X2D','T608X2S','T6092XA','T6092XD','T6092XS',
----'T6102XA','T6102XD','T6102XS','T6112XA','T6112XD','T6112XS','T61772A','T61772D','T61772S','T61782A','T61782D','T61782S','T618X2A','T618X2D','T618X2S','T6192XA','T6192XD','T6192XS','T620X2A','T620X2D',
----'T620X2S','T621X2A','T621X2D','T621X2S','T622X2A','T622X2D','T622X2S','T628X2A','T628X2D','T628X2S','T6292XA','T6292XD','T6292XS','T63002A','T63002D','T63002S','T63012A','T63012D','T63012S','T63022A',
----'T63022D','T63022S','T63032A','T63032D','T63032S','T63042A','T63042D','T63042S','T63062A','T63062D','T63062S','T63072A','T63072D','T63072S','T63082A','T63082D','T63082S','T63092A','T63092D','T63092S',
----'T63112A','T63112D','T63112S','T63122A','T63122D','T63122S','T63192A','T63192D','T63192S','T632X2A','T632X2D','T632X2S','T63302A','T63302D','T63302S','T63312A','T63312D','T63312S','T63322A','T63322D',
----'T63322S','T63332A','T63332D','T63332S','T63392A','T63392D','T63392S','T63412A','T63412D','T63412S','T63422A','T63422D','T63422S','T63432A','T63432D','T63432S','T63442A','T63442D','T63442S','T63452A','T63452D',
----'T63452S','T63462A','T63462D','T63462S','T63482A','T63482D','T63482S','T63512A','T63512D','T63512S','T63592A','T63592D','T63592S','T63612A','T63612D','T63612S','T63622A','T63622D','T63622S','T63632A',
----'T63632D','T63632S','T63692A','T63692D','T63692S','T63712A','T63712D','T63712S','T63792A','T63792D','T63792S','T63812A','T63812D','T63812S','T63822A','T63822D','T63822S','T63832A','T63832D','T63832S',
----'T63892A','T63892D','T63892S','T6392XA','T6392XD','T6392XS','T6402XA','T6402XD','T6402XS','T6482XA','T6482XD','T6482XS','T650X2A','T650X2D','T650X2S','T651X2A','T651X2D','T651X2S','T65212A','T65212D',
----'T65212S','T65222A','T65222D','T65222S','T65292A','T65292D','T65292S','T653X2A','T653X2D','T653X2S','T654X2A','T654X2D','T654X2S','T655X2A','T655X2D','T655X2S','T656X2A','T656X2D','T656X2S','T65812A',
----'T65812D','T65812S','T65822A','T65822D','T65822S','T65832A','T65832D','T65832S','T65892A','T65892D','T65892S','T6592XA','T6592XD','T6592XS','T71112A','T71112D','T71112S','T71122A','T71122D','T71122S',
----'T71132A','T71132D','T71132S','T71152A','T71152D','T71152S','T71162A','T71162D','T71162S','T71192A','T71192D','T71192S','T71222A','T71222D','T71222S','T71232A','T71232D','T71232S','X710XXA','X710XXD',
----'X710XXS','X711XXA','X711XXD','X711XXS','X712XXA','X712XXD','X712XXS','X713XXA','X713XXD','X713XXS','X718XXA','X718XXD','X718XXS','X719XXA','X719XXD','X719XXS','X72XXXA','X72XXXD','X72XXXS','X730XXA',
----'X730XXD','X730XXS','X731XXA','X731XXD','X731XXS','X732XXA','X732XXD','X732XXS','X738XXA','X738XXD','X738XXS','X739XXA','X739XXD','X739XXS','X7401XA','X7401XD','X7401XS','X7402XA','X7402XD','X7402XS',
----'X7409XA','X7409XD','X7409XS','X748XXA','X748XXD','X748XXS','X749XXA','X749XXD','X749XXS','X75XXXA','X75XXXD','X75XXXS','X76XXXA','X76XXXD','X76XXXS','X770XXA','X770XXD','X770XXS','X771XXA','X771XXD',
----'X771XXS','X772XXA','X772XXD','X772XXS','X773XXA','X773XXD','X773XXS','X778XXA','X778XXD','X778XXS','X779XXA','X779XXD','X779XXS','X780XXA','X780XXD','X780XXS','X781XXA','X781XXD','X781XXS','X782XXA',
----'X782XXD','X782XXS','X788XXA','X788XXD','X788XXS','X789XXA','X789XXD','X789XXS','X79XXXA','X79XXXD','X79XXXS','X80XXXA','X80XXXD','X80XXXS','X810XXA','X810XXD','X810XXS','X811XXA','X811XXD','X811XXS',
----'X818XXA','X818XXD','X818XXS','X820XXA','X820XXD','X820XXS','X821XXA','X821XXD','X821XXS','X822XXA','X822XXD','X822XXS','X828XXA','X828XXD','X828XXS','X830XXA','X830XXD','X830XXS','X831XXA','X831XXD',
----'X831XXS','X832XXA','X832XXD','X832XXS','X838XXA','X838XXD','X838XXS','Z915'
--);

-- We don't need to create forms for members who already have them
	MERGE INTO
	#NDBHMember d
	USING
	(
		SELECT DISTINCT
		MVDID
		FROM
		ABCBS_ReferralToNewDirections_Form
	) s
	ON s.MVDID = d.MVDID
	WHEN MATCHED THEN DELETE;

/***************************
CareFlow Rule
****************************/
DROP TABLE IF EXISTS #CareFlowNormalized;

SELECT DISTINCT
CF.MVDID,
'{"CareFlow":"' + CF.Name + '"}' CareFlowRule
INTO
#CareFlowNormalized
FROM
(
	SELECT DISTINCT
	wfr.Name,
	cft.mvdid,
	cft.CreatedDate,
	FIRST_VALUE( cft.RuleId ) OVER ( PARTITION BY cft.ID ORDER BY cft.createddate ) CareFlowRuleId,
	ROW_NUMBER() OVER ( PARTITION BY cft.ID ORDER BY cft.createddate ) rownum
	FROM
    MyVitalDataLive.dbo.CareFlowTask cft with (readuncommitted)
	JOIN HPWorkFlowRule wfr with (readuncommitted) 
	ON cft.RuleID = wfr.Rule_ID
) CF
JOIN #NDBHMember Ref with (readuncommitted)
ON CF.MVDID = Ref.MVDID
WHERE
-- Get the CareFlow Rules. This is simply the lowest rownum
CF.rownum = 1
--and fch.MVDID = '16FFBE96B44D0892AB18'

CREATE INDEX IX_CareFlowNormalized ON #CareFlowNormalized( MVDID );

--SELECT * FROM #CareFlowNormalized;

DROP TABLE IF EXISTS #CareFlow;

;WITH CareFlowCTE
(
	MVDID,
	CareFlowRule
)
AS
(
	SELECT DISTINCT
	pd.MVDID,
	STUFF
	(
		(
			SELECT
			',' + pdn.CareFlowRule
			FROM
			#CareFlowNormalized pdn
			WHERE
			pdn.MVDID = pd.MVDID
			ORDER BY
			pd.MVDID,
			pd.CareFlowRule
			FOR XML PATH( '' )
		), 1, 1, ''
	) AS CareFlowSerialized
	FROM
	#CareFlowNormalized pd
)
SELECT
MVDID,
CASE
WHEN CareFlowRule IS NULL THEN NULL
ELSE CONCAT( '[', CareFlowRule, ']' )
END CareFlow
INTO
#CFRule
FROM
CareFlowCTE;

CREATE INDEX IX_CFRule ON #CFRule( MVDID );

--select * from #CFRule
/*
		DECLARE @CFR varchar(MAX) = '['

		SELECT @CFR += '{"CareFlow":"' + Name + '"},'
		--INTO #CFR
		FROM CareFlowTask cft with (readuncommitted)
		JOIN HPWorkFlowRule wfr with (readuncommitted) ON cft.RuleID = wfr.Rule_ID
		JOIN #NDBHMember Ref with (readuncommitted)
		ON cft.MVDID = Ref.MVDID
		WHERE --cft.MVDID = @MVDID
		Ref.LoadDate > GETDATE() - 70 --(no records for -1 starts from -70)
		AND	(Ref.q2MemFirstName IS NOT NULL OR Ref.q2MemFirstName != '')
		AND (Ref.q2MemLastName IS NOT NULL OR Ref.q2MemLastName != '')
		AND (Ref.MemID IS NOT NULL OR Ref.MemID != '')
		AND Ref.FormAuthor IS NOT NULL
		--ORDER BY Name

		SET @CFR = CASE WHEN RIGHT(@CFR,1) = ',' THEN LEFT(@CFR,LEN(@CFR)-1) ELSE @CFR END + ']' 

		--SELECT @CFR
*/

--Initial temp table

DROP TABLE IF EXISTS #OpioidPrescription

SELECT 
        
		  MVDID
		, OpioidPrescriptionName
		, PrescriberID
		, PrescriberName
		, PharmacyName
        , DrugStrengthUnitOfMeasure
		, RefillsAuthorizedCount
		, NDCCode
		, SUM(Total#UniqueOpioidPrescribed) as Total#UniqueOpioidPrescribed
		, SUM(MetricDecimalQuantity) AS MetricDecimalQuantity
	INTO #OpioidPrescription
FROM
        (    
	SELECT  Rx.MVDID
		, ISNULL(DrugProductName,'') as OpioidPrescriptionName
		, PrescriberID
		, PrescriberName
		, PharmacyName
        , ISNULL(DrugStrengthUnitOfMeasure,'') AS DrugStrengthUnitOfMeasure
		, ISNULL(RefillsAuthorizedCount,0) AS RefillsAuthorizedCount
		, NDCCode
		, COUNT(distinct DrugProductName) as Total#UniqueOpioidPrescribed
		, CAST(MetricDecimalQuantity AS float) AS MetricDecimalQuantity
	FROM Final.dbo.FinalRX Rx with (readuncommitted)
	JOIN #NDBHMember Ref1 with (readuncommitted)
	ON Rx.MVDID = Ref1.MVDID
	 WHERE (ClaimStatus = '1' OR ClaimStatus IS NULL) 	           --> 
	 AND PaidAmount >= 0										   --> 
	 AND CAST(DaysSupply AS float) > 0                          --> Same as the filter in generating main Rx features 
	 AND LOB IN ('US', 'BH', 'BC', 'BX', 'HA')          -->
	 AND DATEDIFF( DAY, ServiceDate, GetUTCDate() ) <= 365
	GROUP BY  Rx.MVDID
		, DrugProductName
		, PrescriberID
		, PrescriberName
		, PharmacyName
        , DrugStrengthUnitOfMeasure
		, RefillsAuthorizedCount
		, MetricDecimalQuantity
		, NDCCode
	)x
  GROUP BY  MVDID
		, OpioidPrescriptionName
		, PrescriberID
		, PrescriberName
		, PharmacyName
        , DrugStrengthUnitOfMeasure
		, RefillsAuthorizedCount
		, NDCCode

CREATE INDEX IX_OpioidPrescriptione ON #OpioidPrescription(MVDID, OpioidPrescriptionName, PrescriberID, PrescriberName
                                                         , PharmacyName, DrugStrengthUnitOfMeasure, RefillsAuthorizedCount
														 , NDCCode, Total#UniqueOpioidPrescribed, MetricDecimalQuantity )

/***************************
  Opioid Prescriptions Names (Brand when available, else Generic)
, Metric Decimal Quantity
, Drug Strength Unit of Measure (if/when available)
, Refill Authorized Count (past 12 months)
****************************/

DROP TABLE IF EXISTS #OpioidNormalized;

SELECT DISTINCT
MVDID,
'{"PrescriptionName":"' + OpioidPrescriptionName + '", "MetricDecimalQuantity":"' + CONVERT(VARCHAR(10),MetricDecimalQuantity) + '", "UOM":"' + DrugStrengthUnitOfMeasure + '", "RefillAuthorizedCount:"' + CONVERT(VARCHAR(5),RefillsAuthorizedCount ) + '", "NDC:"' + NDCCode + '"}' Opioid
INTO
#OpioidNormalized
FROM
(
	SELECT DISTINCT
	MVDID,
	OpioidPrescriptionName,
	MetricDecimalQuantity,
	DrugStrengthUnitOfMeasure,
	RefillsAuthorizedCount,
	NDCCode,
	FIRST_VALUE( op.OpioidPrescriptionName ) OVER ( PARTITION BY op.MVDID,op.OpioidPrescriptionName
	,op.PrescriberID,op.PrescriberName,op.PharmacyName,op.DrugStrengthUnitOfMeasure
	,op.RefillsAuthorizedCount,op.NDCCode
	ORDER BY op.MVDID ) CareFlowRuleId,
	ROW_NUMBER() OVER ( PARTITION BY op.OpioidPrescriptionName ORDER BY op.MVDID ) rownum
	FROM #OpioidPrescription op
) PP
WHERE
-- Get the CareFlow Rules. This is simply the lowest rownum
PP.rownum = 1
--and fch.MVDID = '16FFBE96B44D0892AB18'

CREATE INDEX IX_OpioidPrescriptionNormalized ON #OpioidNormalized( MVDID );

--SELECT * FROM #OpioidNormalized;

DROP TABLE IF EXISTS #OpioidRule;

;WITH OpioidCTE
(
	MVDID,
	Opioid
)
AS
(
	SELECT DISTINCT
	pd.MVDID,
	STUFF
	(
		(
			SELECT
			',' + pdn.Opioid
			FROM
			#OpioidNormalized pdn
			WHERE
			pdn.MVDID = pd.MVDID
			ORDER BY
			pd.MVDID,
			pd.Opioid
			FOR XML PATH( '' )
		), 1, 1, ''
	) AS PrescriptionSerialized
	FROM
	#OpioidNormalized pd
)
SELECT
MVDID,
CASE
WHEN Opioid IS NULL THEN NULL
ELSE CONCAT( '[', Opioid, ']' )
END Prescription
INTO
#OpioidRule
FROM
OpioidCTE;

CREATE INDEX IX_OpioidRule ON #OpioidRule( MVDID );

--select * from #OpioidRule
/*
DECLARE @Opioid varchar(MAX) = '['

SELECT DISTINCT @Opioid += '{"PrescriptionName":"' + OpioidPrescriptionName + '", "MetricDecimalQuantity":"' + CONVERT(VARCHAR(10),MetricDecimalQuantity) + '", "UOM":"' + DrugStrengthUnitOfMeasure + '", "RefillAuthorizedCount:"' + CONVERT(VARCHAR(5),RefillsAuthorizedCount ) + '", "NDC:"' + NDCCode + '"},'
FROM #OpioidPrescription

		SET @Opioid = CASE WHEN RIGHT(@Opioid,1) = ',' THEN LEFT(@Opioid,LEN(@Opioid)-1) ELSE @Opioid END + ']' 

		--SELECT @Opioid
*/
/***************************
Behavioral Health dx (from claims) for past 12 months
***************************/
DROP TABLE IF EXISTS #BehavioralHealthDx

SELECT ICD10dx,dxCCS_DESC INTO #BehavioralHealthDx
FROM (
SELECT ICD10dx,dxCCS_DESC
FROM Datalogy.ds.NewDirections_ICD10_MentalHealth with (readuncommitted)
 
Union

SELECT ICD10dx, ICD10dx_shortDESC
FROM Datalogy.ds.Map_ICD10dx_to_dxCCS with (readuncommitted)
WHERE ICD10dx LIKE 'F%'
) x

CREATE INDEX IX_BehaviorDiagnosis ON #BehavioralHealthDx(ICD10dx,dxCCS_DESC);
--select * from #BehavioralHealthDx
DROP TABLE IF EXISTS #BehaviorDiagnosisNormalized;

SELECT DISTINCT
fch.MVDID,
'{"BehaviorDiagnosis":"' + luicd.MediumDesc + '", "ICD":"' + fchc.BehaviorDX + '"}' DX
INTO
#BehaviorDiagnosisNormalized
FROM
Final.dbo.FinalClaimsHeader fch with (readuncommitted)
OUTER APPLY
(
	SELECT DISTINCT
	hc.ClaimNumber,
	hc.SequenceNumber,
	FIRST_VALUE( hc.CodeValue ) OVER ( PARTITION BY hc.ClaimNumber ORDER BY hc.SequenceNumber ) BehaviorDX,
    bhd.dxCCS_DESC,
	ROW_NUMBER() OVER ( PARTITION BY hc.ClaimNumber ORDER BY hc.SequenceNumber ) rownum
	FROM
	Final.dbo.FinalClaimsHeaderCode hc with (readuncommitted)
	JOIN #BehavioralHealthDx bhd
	ON hc.CodeValue = bhd.ICD10dx
	WHERE
	hc.CodeType = 'DIAG'
	AND hc.ClaimNumber = fch.ClaimNumber
) fchc
LEFT OUTER JOIN MyVitalDataLive.dbo.LookupICD luicd with (readuncommitted)
ON luicd.CodeNoPeriod = fchc.BehaviorDX
JOIN #NDBHMember Ref with (readuncommitted)
ON fch.MVDID = Ref.MVDID
WHERE
-- Lookback at claims for only one year
DATEADD( YEAR, -1, fch.AdmissionDate ) >= getDate()
-- Get the Behavior diagnosis. This is simply the lowest rownum
AND fchc.rownum = 1
--and fch.MVDID = '16FFBE96B44D0892AB18'

CREATE INDEX IX_BehaviorDiagnosisNormalized ON #BehaviorDiagnosisNormalized( MVDID );

--SELECT * FROM #BehaviorDiagnosisNormalized;

DROP TABLE IF EXISTS #BehaviorDiagnosis;

;WITH BehaviorDiagnosisCTE
(
	MVDID,
	DX
)
AS
(
	SELECT DISTINCT
	pd.MVDID,
	STUFF
	(
		(
			SELECT
			',' + pdn.DX
			FROM
			#BehaviorDiagnosisNormalized pdn
			WHERE
			pdn.MVDID = pd.MVDID
			ORDER BY
			pd.MVDID,
			pd.DX
			FOR XML PATH( '' )
		), 1, 1, ''
	) AS DXSerialized
	FROM
	#BehaviorDiagnosisNormalized pd
)
SELECT
MVDID,
CASE
WHEN DX IS NULL THEN NULL
ELSE CONCAT( '[', DX, ']' )
END DX
INTO
#BehaviorDiagnosis
FROM
BehaviorDiagnosisCTE;

CREATE INDEX IX_BehaviorDiagnosis ON #BehaviorDiagnosis( MVDID );

--select * from #BehaviorDiagnosis
/*
DROP TABLE IF EXISTS #BehavioralHealthDx

SELECT ICD10dx,dxCCS_DESC INTO #BehavioralHealthDx
FROM (
SELECT ICD10dx,dxCCS_DESC
FROM Datalogy.ds.NewDirections_ICD10_MentalHealth with (readuncommitted)
 
Union

SELECT ICD10dx, ICD10dx_shortDESC
FROM Datalogy.ds.Map_ICD10dx_to_dxCCS with (readuncommitted)
WHERE ICD10dx LIKE 'F%'
) x

DECLARE @BehaviorDx varchar(MAX) = '['

SELECT DISTINCT @BehaviorDx += '{"BHDiagnosis":"' + bh.dxCCS_DESC + '", "ICD":"' + bh.ICD10dx + '"},'
FROM Final.dbo.FinalClaimsHeader fch with (readuncommitted)
JOIN Final.dbo.FinalClaimsHeaderCode fchc with (readuncommitted)
on fch.MVDID = fchc.MVDID
join #BehavioralHealthDx bh 
on bh.ICD10dx = fchc.CodeValue
JOIN #NDBHMember Ref with (readuncommitted)
ON fch.MemberID = Ref.MemID
where DATEDIFF( DAY, AdmissionDate, GetUTCDate() ) <= 365
AND Ref.LoadDate > GETDATE() - 70
AND (Ref.q2MemFirstName IS NOT NULL OR Ref.q2MemFirstName != '')
AND (Ref.q2MemLastName IS NOT NULL OR Ref.q2MemLastName != '')
AND (Ref.MemID IS NOT NULL OR Ref.MemID != '')
AND Ref.FormAuthor IS NOT NULL

		SET @BehaviorDx = CASE WHEN RIGHT(@BehaviorDx,1) = ',' THEN LEFT(@BehaviorDx,LEN(@BehaviorDx)-1) ELSE @BehaviorDx END + ']' 

		--SELECT @BehaviorDx
*/
/***************************
Primary Medical Dx (from claims) for past 12 months
***************************/
DROP TABLE IF EXISTS #PrimaryDiagnosisNormalized;

SELECT DISTINCT
fch.MVDID,
'{"PrimaryDiagnosis":"' + luicd.MediumDesc + '", "ICD":"' + fchc.PrimaryDX + '"}' DX
INTO
#PrimaryDiagnosisNormalized
FROM
Final.dbo.FinalClaimsHeader fch with (readuncommitted)
OUTER APPLY
(
	SELECT DISTINCT
	hc.ClaimNumber,
	hc.SequenceNumber,
	FIRST_VALUE( hc.CodeValue ) OVER ( PARTITION BY hc.ClaimNumber ORDER BY hc.SequenceNumber ) PrimaryDX,
	ROW_NUMBER() OVER ( PARTITION BY hc.ClaimNumber ORDER BY hc.SequenceNumber ) rownum
	FROM
	Final.dbo.FinalClaimsHeaderCode hc with (readuncommitted)
	WHERE
	hc.CodeType = 'DIAG'
	AND hc.ClaimNumber = fch.ClaimNumber
) fchc
LEFT OUTER JOIN MyVitalDataLive.dbo.LookupICD luicd with (readuncommitted)
ON luicd.CodeNoPeriod = fchc.PrimaryDX
JOIN #NDBHMember Ref with (readuncommitted)
ON fch.MVDID = Ref.MVDID
WHERE
-- Lookback at claims for only one year
DATEADD( YEAR, -1, fch.AdmissionDate ) >= getDate()
-- Get the primary diagnosis. This is simply the lowest rownum
AND fchc.rownum = 1
--and fch.MVDID = '16FFBE96B44D0892AB18'

CREATE INDEX IX_PrimaryDiagnosisNormalized ON #PrimaryDiagnosisNormalized( MVDID );

--SELECT * FROM #PrimaryDiagnosisNormalized;

DROP TABLE IF EXISTS #PrimaryDiagnosis;

;WITH PrimaryDiagnosisCTE
(
	MVDID,
	DX
)
AS
(
	SELECT DISTINCT
	pd.MVDID,
	STUFF
	(
		(
			SELECT
			',' + pdn.DX
			FROM
			#PrimaryDiagnosisNormalized pdn
			WHERE
			pdn.MVDID = pd.MVDID
			ORDER BY
			pd.MVDID,
			pd.DX
			FOR XML PATH( '' )
		), 1, 1, ''
	) AS DXSerialized
	FROM
	#PrimaryDiagnosisNormalized pd
)
SELECT
MVDID,
CASE
WHEN DX IS NULL THEN NULL
ELSE CONCAT( '[', DX, ']' )
END DX
INTO
#PrimaryDiagnosis
FROM
PrimaryDiagnosisCTE;

CREATE INDEX IX_PrimaryDiagnosis ON #PrimaryDiagnosis( MVDID );

/***************************
Pain related Health Dx (from claims) for past 12 months
***************************/
DROP TABLE IF EXISTS #PainRelatedDx

SELECT ICD10dx,ICD10dx_shortDESC INTO #PainRelatedDx
FROM (
SELECT ICD10dx,ICD10dx_shortDESC FROM Datalogy.ds.Map_ICD10dx_to_dxCCS with (readuncommitted)
WHERE ICD10dx_shortDESC LIKE '%Pain%'
OR dxCCS IN (251, 102)
) x

CREATE INDEX IX_PainDiagnosis ON #PainRelatedDx(ICD10dx,ICD10dx_shortDESC);
--select * from #PainRelatedDx
DROP TABLE IF EXISTS #PainDiagnosisNormalized;

SELECT DISTINCT
fch.MVDID,
'{"PainDiagnosis":"' + luicd.MediumDesc + '", "ICD":"' + fchc.PainDX + '"}' DX
INTO
#PainDiagnosisNormalized
FROM
Final.dbo.FinalClaimsHeader fch with (readuncommitted)
OUTER APPLY
(
	SELECT DISTINCT
	hc.ClaimNumber,
	hc.SequenceNumber,
	FIRST_VALUE( hc.CodeValue ) OVER ( PARTITION BY hc.ClaimNumber ORDER BY hc.SequenceNumber ) PainDX,
	ROW_NUMBER() OVER ( PARTITION BY hc.ClaimNumber ORDER BY hc.SequenceNumber ) rownum
	FROM
	Final.dbo.FinalClaimsHeaderCode hc with (readuncommitted)
	JOIN #PainRelatedDx bhd
	ON hc.CodeValue = bhd.ICD10dx
	WHERE
	hc.CodeType = 'DIAG'
	AND hc.ClaimNumber = fch.ClaimNumber
) fchc
LEFT OUTER JOIN MyVitalDataLive.dbo.LookupICD luicd with (readuncommitted)
ON luicd.CodeNoPeriod = fchc.PainDX
JOIN #NDBHMember Ref with (readuncommitted)
ON fch.MVDID = Ref.MVDID
WHERE
-- Lookback at claims for only one year
DATEADD( YEAR, -1, fch.AdmissionDate ) >= getDate()
-- Get the Pain diagnosis. This is simply the lowest rownum
AND fchc.rownum = 1
--and fch.MVDID = '16FFBE96B44D0892AB18'

CREATE INDEX IX_PainDiagnosisNormalized ON #PainDiagnosisNormalized( MVDID );

--SELECT * FROM #PainDiagnosisNormalized;

DROP TABLE IF EXISTS #PainDiagnosis;

;WITH PainDiagnosisCTE
(
	MVDID,
	DX
)
AS
(
	SELECT DISTINCT
	pd.MVDID,
	STUFF
	(
		(
			SELECT
			',' + pdn.DX
			FROM
			#PainDiagnosisNormalized pdn
			WHERE
			pdn.MVDID = pd.MVDID
			ORDER BY
			pd.MVDID,
			pd.DX
			FOR XML PATH( '' )
		), 1, 1, ''
	) AS DXSerialized
	FROM
	#PainDiagnosisNormalized pd
)
SELECT
MVDID,
CASE
WHEN DX IS NULL THEN NULL
ELSE CONCAT( '[', DX, ']' )
END DX
INTO
#PainDiagnosis
FROM
PainDiagnosisCTE;

CREATE INDEX IX_PainDiagnosis ON #PainDiagnosis( MVDID );

--select * from #PainDiagnosis
/*
DROP TABLE IF EXISTS #PainHealthDx

SELECT ICD10dx,ICD10dx_shortDESC INTO #PainHealthDx
FROM (
SELECT ICD10dx,ICD10dx_shortDESC FROM Datalogy.ds.Map_ICD10dx_to_dxCCS with (readuncommitted)
WHERE ICD10dx_shortDESC LIKE '%Pain%'
OR dxCCS IN (251, 102)
) x

DECLARE @PainDx varchar(MAX) = '['

SELECT DISTINCT @PainDx += '{"PainDiagnosis":"' + ph.ICD10dx_shortDESC + '", "ICD":"' + ph.ICD10dx + '"},'
FROM Final.dbo.FinalClaimsHeader fch with (readuncommitted)
JOIN Final.dbo.FinalClaimsHeaderCode fchc with (readuncommitted)
on fch.MVDID = fchc.MVDID
join #PainHealthDx ph 
on ph.ICD10dx = fchc.CodeValue
JOIN #NDBHMember Ref with (readuncommitted)
ON fch.MemberID = Ref.MemID
where DATEDIFF( DAY, AdmissionDate, GetUTCDate() ) <= 365
AND Ref.LoadDate > GETDATE() - 70
AND (Ref.q2MemFirstName IS NOT NULL OR Ref.q2MemFirstName != '')
AND (Ref.q2MemLastName IS NOT NULL OR Ref.q2MemLastName != '')
AND (Ref.MemID IS NOT NULL OR Ref.MemID != '')
AND Ref.FormAuthor IS NOT NULL

		SET @PainDx = CASE WHEN RIGHT(@PainDx,1) = ',' THEN LEFT(@PainDx,LEN(@PainDx)-1) ELSE @PainDx END + ']' 

		--SELECT @PainDx
*/
/***************************
Prescriber name, Prescriber ID (for any opioid RX)
, total # of unique opioid prescribed          
(over past 12 months) 
****************************/
DROP TABLE IF EXISTS #PrescriberNormalized;

SELECT DISTINCT
MVDID,
'{"PrescriberName":"' + PrescriberName + '", "PrescriberID":"' + PrescriberID + '", "TotalPrescribed":"' + CONVERT(VARCHAR(5),Total#UniqueOpioidPrescribed) + '"}' Prescriber
INTO
#PrescriberNormalized
FROM
(
	SELECT DISTINCT
	MVDID,
	PrescriberName,
	PrescriberID,
	Total#UniqueOpioidPrescribed,
	FIRST_VALUE( op.PrescriberName) OVER ( PARTITION BY op.MVDID,op.OpioidPrescriptionName
	,op.PrescriberID,op.PrescriberName,op.PrescriberName,op.DrugStrengthUnitOfMeasure
	,op.RefillsAuthorizedCount,op.NDCCode
	ORDER BY op.MVDID ) CareFlowRuleId,
	ROW_NUMBER() OVER ( PARTITION BY op.PrescriberName ORDER BY op.MVDID ) rownum
	FROM #OpioidPrescription op
) PP
WHERE
-- Get the CareFlow Rules. This is simply the lowest rownum
PP.rownum = 1
--and fch.MVDID = '16FFBE96B44D0892AB18'

CREATE INDEX IX_PrescriberNormalized ON #PrescriberNormalized( MVDID );

--SELECT * FROM #PrescriberNormalized;

DROP TABLE IF EXISTS #Prescriber;

;WITH PrescriberCTE
(
	MVDID,
	Prescriber
)
AS
(
	SELECT DISTINCT
	pd.MVDID,
	STUFF
	(
		(
			SELECT
			',' + pdn.Prescriber
			FROM
			#PrescriberNormalized pdn
			WHERE
			pdn.MVDID = pd.MVDID
			ORDER BY
			pd.MVDID,
			pd.Prescriber
			FOR XML PATH( '' )
		), 1, 1, ''
	) AS PrescriberSerialized
	FROM
	#PrescriberNormalized pd
)
SELECT
MVDID,
CASE
WHEN Prescriber IS NULL THEN NULL
ELSE CONCAT( '[', Prescriber, ']' )
END Prescriber
INTO
#PrescriberRule
FROM
PrescriberCTE;

CREATE INDEX IX_PrescriberRule ON #PrescriberRule( MVDID );

--select * from #PrescriberRule
/*
DECLARE @Prescriber varchar(MAX) = '['

SELECT DISTINCT @Prescriber += '{"PrescriberName":"' + PrescriberName + '", "PrescriberID":"' + PrescriberID + '", "TotalPrescribed":"' + CONVERT(VARCHAR(5),Total#UniqueOpioidPrescribed) + '"},'
FROM #OpioidPrescription


		SET @Prescriber = CASE WHEN RIGHT(@Prescriber,1) = ',' THEN LEFT(@Prescriber,LEN(@Prescriber)-1) ELSE @Prescriber END + ']' 

		--SELECT @Prescriber
*/
/***************************
SDOH Factors
***************************/
DROP TABLE IF EXISTS #SDOHNormalized;

SELECT DISTINCT
PP.MVDID,
'{"CompositionDisability":"' + CONVERT(VARCHAR(5),SDOH_Vulnerable_HH_ComposiitonDisability) + '", "Language":"' + CONVERT(VARCHAR(5),SDOH_Vulnerable_Language) + '", "OverAll":"' + CONVERT(VARCHAR(5),SDOH_Vulnerable_OverAll) + '", "Socioeconomic":"' + CONVERT(VARCHAR(5),SDOH_Vulnerable_Socioeconomic) + '", "Transportation":"' + CONVERT(VARCHAR(5),SDOH_Vulnerable_Transportation) + '"}' SDOH
INTO
#SDOHNormalized
FROM
(
	SELECT DISTINCT
	MVDID,
	tags.SDOH_Vulnerable_HH_ComposiitonDisability,
	tags.SDOH_Vulnerable_Language,
	tags.SDOH_Vulnerable_OverAll,
	tags.SDOH_Vulnerable_Socioeconomic,
	tags.SDOH_Vulnerable_Transportation,
	FIRST_VALUE(tags.PartyKey) OVER ( PARTITION BY tags.PartyKey,tags.SDOH_Vulnerable_HH_ComposiitonDisability,
	tags.SDOH_Vulnerable_Language,tags.SDOH_Vulnerable_OverAll,tags.SDOH_Vulnerable_Socioeconomic,
	tags.SDOH_Vulnerable_Transportation
	ORDER BY tags.PartyKey ) tagsId,
	ROW_NUMBER() OVER ( PARTITION BY tags.PartyKey,tags.SDOH_Vulnerable_HH_ComposiitonDisability,
	tags.SDOH_Vulnerable_Language,tags.SDOH_Vulnerable_OverAll,tags.SDOH_Vulnerable_Socioeconomic,
	tags.SDOH_Vulnerable_Transportation ORDER BY tags.PartyKey ) rownum
	FROM 
	tags_for_high_risk_members tags with (readuncommitted)
    join FinalMember fm with (readuncommitted)
    on tags.PartyKey = fm.PartyKey
) PP
JOIN #NDBHMember Ref with (readuncommitted)
ON PP.MVDID = Ref.MVDID
WHERE
-- Get the CareFlow Rules. This is simply the lowest rownum
PP.rownum = 1
--and fch.MVDID = '16FFBE96B44D0892AB18'

CREATE INDEX IX_SDOHNormalized ON #SDOHNormalized( MVDID );

--SELECT * FROM #SDOHNormalized;

DROP TABLE IF EXISTS #SDOH;

DROP TABLE IF EXISTS #SDOHRule;

;WITH SDOHCTE
(
	MVDID,
	SDOH
)
AS
(
	SELECT DISTINCT
	pd.MVDID,
	STUFF
	(
		(
			SELECT
			',' + pdn.SDOH
			FROM
			#SDOHNormalized pdn
			WHERE
			pdn.MVDID = pd.MVDID
			ORDER BY
			pd.MVDID,
			pd.SDOH
			FOR XML PATH( '' )
		), 1, 1, ''
	) AS SDOHSerialized
	FROM
	#SDOHNormalized pd
)
SELECT
MVDID,
CASE
WHEN SDOH IS NULL THEN NULL
ELSE CONCAT( '[', SDOH, ']' )
END SDOH
INTO
#SDOHRule
FROM
SDOHCTE;

CREATE INDEX IX_SDOHRule ON #SDOHRule( MVDID );

--select * from #SDOHRule

/*
DECLARE @SDOHFactor varchar(MAX) = '['

SELECT DISTINCT @SDOHFactor += '{"CompositionDisability":"' + CONVERT(VARCHAR(5),SDOH_Vulnerable_HH_ComposiitonDisability) + '", "Language":"' + CONVERT(VARCHAR(5),SDOH_Vulnerable_Language) + '", "OverAll":"' + CONVERT(VARCHAR(5),SDOH_Vulnerable_OverAll) + '", "Socioeconomic":"' + CONVERT(VARCHAR(5),SDOH_Vulnerable_Socioeconomic) + '", "Transportation":"' + CONVERT(VARCHAR(5),SDOH_Vulnerable_Transportation) + '"},'
from tags_for_high_risk_members tags with (readuncommitted)
join FinalMember fm with (readuncommitted)
on tags.PartyKey = fm.PartyKey
JOIN #NDBHMember Ref with (readuncommitted)
ON fm.MemberID = Ref.MemID
WHERE Ref.LoadDate > GETDATE() - 70
AND (Ref.q2MemFirstName IS NOT NULL OR Ref.q2MemFirstName != '')
AND (Ref.q2MemLastName IS NOT NULL OR Ref.q2MemLastName != '')
AND (Ref.MemID IS NOT NULL OR Ref.MemID != '')
AND Ref.FormAuthor IS NOT NULL

		SET @SDOHFactor = CASE WHEN RIGHT(@SDOHFactor,1) = ',' THEN LEFT(@SDOHFactor,LEN(@SDOHFactor)-1) ELSE @SDOHFactor END + ']' 

		--SELECT @SDOHFactor
*/
/***************************
Chronic Medical Disease Dx (from claims) for past 12 months
***************************/
DROP TABLE IF EXISTS #ChronicHealthDx

SELECT ICD10dx,ICD10dx_DESC INTO #ChronicHealthDx
FROM (
SELECT ICD10dx
      ,ICD10dx_DESC
      ,CCI
  FROM Datalogy.ds.Map_ICD10dx_to_CCI_BSI with (readuncommitted)
  WHERE CCI = 1
) x

CREATE INDEX IX_ChronicDiagnosis ON #ChronicHealthDx(ICD10dx,ICD10dx_DESC);
--select * from #ChronicRelatedDx
DROP TABLE IF EXISTS #ChronicDiagnosisNormalized;

SELECT DISTINCT
fch.MVDID,
'{"ChronicDiagnosis":"' + luicd.MediumDesc + '", "ICD":"' + fchc.ChronicDX + '"}' DX
INTO
#ChronicDiagnosisNormalized
FROM
Final.dbo.FinalClaimsHeader fch with (readuncommitted)
OUTER APPLY
(
	SELECT DISTINCT
	hc.ClaimNumber,
	hc.SequenceNumber,
	FIRST_VALUE( hc.CodeValue ) OVER ( PARTITION BY hc.ClaimNumber ORDER BY hc.SequenceNumber ) ChronicDX,
	ROW_NUMBER() OVER ( PARTITION BY hc.ClaimNumber ORDER BY hc.SequenceNumber ) rownum
	FROM
	Final.dbo.FinalClaimsHeaderCode hc with (readuncommitted)
	JOIN #ChronicHealthDx bhd
	ON hc.CodeValue = bhd.ICD10dx
	WHERE
	hc.CodeType = 'DIAG'
	AND hc.ClaimNumber = fch.ClaimNumber
) fchc
LEFT OUTER JOIN MyVitalDataLive.dbo.LookupICD luicd with (readuncommitted)
ON luicd.CodeNoPeriod = fchc.ChronicDX
JOIN #NDBHMember Ref with (readuncommitted)
ON fch.MVDID = Ref.MVDID
WHERE
-- Lookback at claims for only one year
DATEADD( YEAR, -1, fch.AdmissionDate ) >= getDate()
-- Get the Chronic diagnosis. This is simply the lowest rownum
AND fchc.rownum = 1
--and fch.MVDID = '16FFBE96B44D0892AB18'

CREATE INDEX IX_ChronicDiagnosisNormalized ON #ChronicDiagnosisNormalized( MVDID );

--SELECT * FROM #ChronicDiagnosisNormalized;

DROP TABLE IF EXISTS #ChronicDiagnosis;

;WITH ChronicDiagnosisCTE
(
	MVDID,
	DX
)
AS
(
	SELECT DISTINCT
	pd.MVDID,
	STUFF
	(
		(
			SELECT
			',' + pdn.DX
			FROM
			#ChronicDiagnosisNormalized pdn
			WHERE
			pdn.MVDID = pd.MVDID
			ORDER BY
			pd.MVDID,
			pd.DX
			FOR XML PATH( '' )
		), 1, 1, ''
	) AS DXSerialized
	FROM
	#ChronicDiagnosisNormalized pd
)
SELECT
MVDID,
CASE
WHEN DX IS NULL THEN NULL
ELSE CONCAT( '[', DX, ']' )
END DX
INTO
#ChronicDiagnosis
FROM
ChronicDiagnosisCTE;

CREATE INDEX IX_ChronicDiagnosis ON #ChronicDiagnosis( MVDID );

--select * from #ChronicDiagnosis

/*
DROP TABLE IF EXISTS #ChronicHealthDx

SELECT ICD10dx,ICD10dx_DESC INTO #ChronicHealthDx
FROM (
SELECT ICD10dx
      ,ICD10dx_DESC
      ,CCI
  FROM Datalogy.ds.Map_ICD10dx_to_CCI_BSI with (readuncommitted)
  WHERE CCI = 1
) x

DECLARE @ChronicDx varchar(MAX) = '['

SELECT DISTINCT @ChronicDx += '{"ChronicDiagnosis":"' + ch.ICD10dx_DESC + '", "ICD":"' + ch.ICD10dx + '"},'
FROM Final.dbo.FinalClaimsHeader fch with (readuncommitted)
JOIN Final.dbo.FinalClaimsHeaderCode fchc with (readuncommitted)
on fch.MVDID = fchc.MVDID
join #ChronicHealthDx ch 
on ch.ICD10dx = fchc.CodeValue
JOIN #NDBHMember Ref with (readuncommitted)
ON fch.MemberID = Ref.MemID
where DATEDIFF( DAY, AdmissionDate, GetUTCDate() ) <= 365
AND Ref.LoadDate > GETDATE() - 70
AND (Ref.q2MemFirstName IS NOT NULL OR Ref.q2MemFirstName != '')
AND (Ref.q2MemLastName IS NOT NULL OR Ref.q2MemLastName != '')
AND (Ref.MemID IS NOT NULL OR Ref.MemID != '')
AND Ref.FormAuthor IS NOT NULL


		SET @ChronicDx = CASE WHEN RIGHT(@ChronicDx,1) = ',' THEN LEFT(@ChronicDx,LEN(@ChronicDx)-1) ELSE @ChronicDx END + ']' 

		--SELECT @ChronicDx
*/
/***************************
Psychotropic prescriptions and 
fill dates past 12 months (Brand when available, else Generic)
***************************/
DROP TABLE IF EXISTS #PsychotropicPrescription

SELECT NDC.NDC,NDC.BN
INTO #PsychotropicPrescription
FROM [FirstDataBankDB].[dbo].[RNDC14_NDC_MSTR] NDC with (readuncommitted)
JOIN [FirstDataBankDB].[dbo].[RGCNSEQ4_GCNSEQNO_MSTR] LNK with (readuncommitted) on LNK.GCN_SEQNO = NDC.GCN_SEQNO
JOIN [FirstDataBankDB].[dbo].[RGTCD0_GEN_THERAP_CLASS_DESC] GEN with (readuncommitted) on GEN.GTC = LNK.GTC
WHERE GEN.GTC = 80

--select top 100 * from #PsychotropicPrescription

CREATE INDEX IX_PsychotropicPrescription ON #PsychotropicPrescription(NDC,BN);

DROP TABLE IF EXISTS #PsychotropicPrescriptionNormalized;

SELECT DISTINCT
RXCode.MVDID,
'{"PsychotropicPrescription":"' + RXCode.BN + '", "ICD":"' + RXCode.PsychotropicPrescription + '", "FillDate":"' + convert(varchar(10),RXCode.ServiceDate) + '"}' PsychotropicPrescription
INTO
#PsychotropicPrescriptionNormalized
FROM
(
	SELECT DISTINCT
	pp.BN,
	rx.servicedate,
	rx.mvdid,
	FIRST_VALUE( rx.NDCCode ) OVER ( PARTITION BY rx.ClaimNumber ORDER BY rx.servicedate ) PsychotropicPrescription,
	ROW_NUMBER() OVER ( PARTITION BY rx.ClaimNumber ORDER BY rx.servicedate ) rownum
	FROM
	Final.dbo.FinalRX rx with (readuncommitted)
	JOIN #PsychotropicPrescription pp
	ON rx.NDCCode = pp.NDC
) RXCode

JOIN #NDBHMember Ref with (readuncommitted)
ON RXCode.MVDID = Ref.MVDID
WHERE
-- Lookback at claims for only one year
DATEADD( YEAR, -1, RXCode.ServiceDate ) >= getDate()
-- Get the Psychotropic Prescription. This is simply the lowest rownum
AND RXCode.rownum = 1
--and fch.MVDID = '16FFBE96B44D0892AB18'

CREATE INDEX IX_PsychotropicPrescriptionNormalized ON #PsychotropicPrescriptionNormalized( MVDID );

--SELECT * FROM #PsychotropicPrescriptionNormalized;

DROP TABLE IF EXISTS #PsychoPrescription;

;WITH PsychotropicPrescriptionCTE
(
	MVDID,
	Prescription
)
AS
(
	SELECT DISTINCT
	pd.MVDID,
	STUFF
	(
		(
			SELECT
			',' + pdn.PsychotropicPrescription
			FROM
			#PsychotropicPrescriptionNormalized pdn
			WHERE
			pdn.MVDID = pd.MVDID
			ORDER BY
			pd.MVDID,
			pd.PsychotropicPrescription
			FOR XML PATH( '' )
		), 1, 1, ''
	) AS PrescriptionSerialized
	FROM
	#PsychotropicPrescriptionNormalized pd
)
SELECT
MVDID,
CASE
WHEN Prescription IS NULL THEN NULL
ELSE CONCAT( '[', Prescription, ']' )
END Prescription
INTO
#PsychoPrescription
FROM
PsychotropicPrescriptionCTE;

CREATE INDEX #PsychoPrescription ON #PsychoPrescription( MVDID );

--select * from #PsychotropicPrescription
/*
DROP TABLE IF EXISTS #PsychotropicPrescription

SELECT GEN.GTC_DESC,NDC.NDC,NDC.LN,NDC.BN,Rx.ServiceDate,Rx.MemberID 
INTO #PsychotropicPrescription
FROM [FirstDataBankDB].[dbo].[RNDC14_NDC_MSTR] NDC with (readuncommitted)
JOIN [FirstDataBankDB].[dbo].[RGCNSEQ4_GCNSEQNO_MSTR] LNK with (readuncommitted) on LNK.GCN_SEQNO = NDC.GCN_SEQNO
JOIN [FirstDataBankDB].[dbo].[RGTCD0_GEN_THERAP_CLASS_DESC] GEN with (readuncommitted) on GEN.GTC = LNK.GTC
JOIN Final.dbo.FinalRX Rx with (readuncommitted) ON NDC.NDC = Rx.NDCCode
WHERE GEN.GTC = 80

--select top 100 * from #PsychotropicPrescription

DECLARE @Psychotropic varchar(MAX) = '['

SELECT DISTINCT @Psychotropic += '{"PsychotropicPrescription":"' + GTC_DESC + '", "FillDate":"' + CONVERT(VARCHAR(10),ServiceDate) + '"},'
FROM #PsychotropicPrescription Ps
JOIN #NDBHMember Ref with (readuncommitted)
ON Ps.MemberID = Ref.MemID
WHERE Ref.LoadDate > GETDATE() - 70
AND (Ref.q2MemFirstName IS NOT NULL OR Ref.q2MemFirstName != '')
AND (Ref.q2MemLastName IS NOT NULL OR Ref.q2MemLastName != '')
AND (Ref.MemID IS NOT NULL OR Ref.MemID != '')
AND Ref.FormAuthor IS NOT NULL
GROUP BY Ref.MemID, GTC_DESC, ServiceDate

		SET @Psychotropic = CASE WHEN RIGHT(@Psychotropic,1) = ',' THEN LEFT(@Psychotropic,LEN(@Psychotropic)-1) ELSE @Psychotropic END + ']' 

		--SELECT @Psychotropic
*/

/************************
 --ER Counts     
 ************************/

        DROP TABLE IF EXISTS #ERVisitCount

		SELECT 
		       MVDID,SUM(ERCount) ERCount
		     , AdmissionDate, DischargeDate
			 , ERNames
			 , ERAddress1, ERAddress2
			 , ERCity, ERState, ERZip
        INTO #ERVisitCount
		FROM
		    (
		SELECT
		       fch.MVDID,COUNT(DISTINCT AdmissionDate) ERCount
		     , fch.AdmissionDate, fch.DischargeDate
			 , CASE WHEN fp.BusinessName IS NULL THEN CONCAT(fp.ProviderLastName, fp.ProviderFirstName) ELSE fp.BusinessName END as ERNames
			 , fp.BusinessAddress1 as ERAddress1, fp.BusinessAddress2 as ERAddress2
			 , fp.BusinessCity as ERCity, fp.BusinessState as ERState, fp.BusinessZip as ERZip
		FROM dbo.finalclaimsheader fch (readuncommitted)
		JOIN dbo.FinalProvider fp (readuncommitted)
		ON fch.AttendingProviderNPI = fp.NPI
		JOIN #NDBHMember Ref2 with (readuncommitted)
		ON fch.MVDID = Ref2.MVDID
		WHERE DATEDIFF( DAY, AdmissionDate, GetUTCDate() ) <= 365
        AND EmergencyIndicator = 1 
		GROUP BY fch.MVDID,  fch.AdmissionDate, fch.DischargeDate, fp.BusinessName,fp.ProviderLastName
		        , fp.ProviderFirstName, fp.BusinessAddress1, fp.BusinessAddress2, fp.BusinessCity
				, fp.BusinessState, fp.BusinessZip
            )r
		GROUP BY MVDID, AdmissionDate, DischargeDate
		        , ERNames, ERAddress1, ERAddress2, ERCity, ERState, ERZip

CREATE INDEX IX_ERVisitCount ON #ERVisitCount( MVDID,ERCount,AdmissionDate,DischargeDate,ERNames
			                                 , ERAddress1, ERAddress2, ERCity, ERState, ERZip )

/***************************
Total number of ER visits past 12 months (Do not send dates)
****************************/
DROP TABLE IF EXISTS #ERVisitNormalized;

SELECT DISTINCT
MVDID,
'{"ERVisit":"' + CONVERT(VARCHAR(5),ERCount) + '"}' ERVisit
INTO
#ERVisitNormalized
FROM
(
	SELECT DISTINCT
	er.MVDID,
	SUM(er.ERCount) ERCount,
	FIRST_VALUE(er.MVDID) OVER ( PARTITION BY er.MVDID
	ORDER BY er.ERCount ) ERVisitId,
	ROW_NUMBER() OVER ( PARTITION BY er.MVDID ORDER BY er.ERCount ) rownum
	FROM #ERVisitCount er
	--where MVDID = '160DBAA10414F9BE8775'
	GROUP BY er.MVDID,er.ERCount
) PP
WHERE
-- Get the CareFlow Rules. This is simply the lowest rownum
PP.rownum = 1
--and PP.MVDID = '160DBAA10414F9BE8775'

--select * from #ERVisitCount where MVDID = '160DBAA10414F9BE8775'

CREATE INDEX IX_#ERVisitNormalized ON #ERVisitNormalized( MVDID );

--SELECT * FROM #ERVisitNormalized;

DROP TABLE IF EXISTS #ERVisit;

DROP TABLE IF EXISTS #ERVisitRule

;WITH ERVisitCTE
(
	MVDID,
	ERVisit
)
AS
(
	SELECT DISTINCT
	pd.MVDID,
	STUFF
	(
		(
			SELECT
			',' + pdn.ERVisit
			FROM
			#ERVisitNormalized pdn
			WHERE
			pdn.MVDID = pd.MVDID
			ORDER BY
			pd.MVDID,
			pd.ERVisit
			FOR XML PATH( '' )
		), 1, 1, ''
	) AS ERVisitSerialized
	FROM
	#ERVisitNormalized pd
)
SELECT
MVDID,
CASE
WHEN ERVisit IS NULL THEN NULL
ELSE CONCAT( '[', ERVisit, ']' )
END ERVisit
INTO
#ERVisitRule
FROM
ERVisitCTE;

CREATE INDEX IX_ERVisitRule ON #ERVisitRule( MVDID );

--select * from #ERVisitRule where MVDID = '160DBAA10414F9BE8775'
--select * from #ERVisitCount where MVDID = '160DBAA10414F9BE8775'
/*
DECLARE @ERVisit varchar(MAX) = '['

SELECT DISTINCT @ERVisit += '{"ERVisit":"' + CONVERT(VARCHAR(5),ERCount) + '"},'
FROM #ERVisit

		SET @ERVisit = CASE WHEN RIGHT(@ERVisit,1) = ',' THEN LEFT(@ERVisit,LEN(@ERVisit)-1) ELSE @ERVisit END + ']' 

		--SELECT @ERVisit
*/
/************************
ER dates of service, primary dx past 12 months
*************************/
DROP TABLE IF EXISTS #ERDateofServiceNormalized;

SELECT DISTINCT
MVDID,
'{"ERServiceFromDate":"' + CONVERT(VARCHAR(11),AdmissionDate,101) + '"}' ERDateofService
INTO
#ERDateofServiceNormalized
FROM
(
	SELECT DISTINCT
	MVDID,
	AdmissionDate,
	FIRST_VALUE(er.MVDID) OVER ( PARTITION BY er.MVDID
	ORDER BY er.ERCount ) ERDateofServiceId,
	ROW_NUMBER() OVER ( PARTITION BY er.MVDID ORDER BY er.ERCount ) rownum
	FROM #ERVisitCount er
	--where MVDID = '160DBAA10414F9BE8775'
	GROUP BY MVDID,ERCount,AdmissionDate
) PP
--WHERE
-- Get the CareFlow Rules. This is simply the lowest rownum
--PP.rownum = 1
--and PP.MVDID = '160DBAA10414F9BE8775'

--select * from #ERVisitCount where MVDID = '160DBAA10414F9BE8775'

CREATE INDEX IX_ERDateofService ON #ERDateofServiceNormalized( MVDID );

--SELECT * FROM #ERVisitNormalized;

DROP TABLE IF EXISTS #ERDateofService;

DROP TABLE IF EXISTS #ERDateofServiceRule

;WITH ERDateofServiceCTE
(
	MVDID,
	ERDateofService
)
AS
(
	SELECT DISTINCT
	pd.MVDID,
	STUFF
	(
		(
			SELECT
			',' + pdn.ERDateofService
			FROM
			#ERDateofServiceNormalized pdn
			WHERE
			pdn.MVDID = pd.MVDID
			ORDER BY
			pd.MVDID,
			pd.ERDateofService
			FOR XML PATH( '' )
		), 1, 1, ''
	) AS ERDateofServiceSerialized
	FROM
	#ERDateofServiceNormalized pd
)
SELECT
MVDID,
CASE
WHEN ERDateofService IS NULL THEN NULL
ELSE CONCAT( '[', ERDateofService, ']' )
END ERDateofService
INTO
#ERDateofServiceRule
FROM
ERDateofServiceCTE;

CREATE INDEX IX_ERDateofServiceRule ON #ERDateofServiceRule( MVDID );

--select * from #ERDateofServiceRule where MVDID = '160DBAA10414F9BE8775'
--select * from #ERVisitCount where MVDID = '160DBAA10414F9BE8775'
/*
DECLARE @ERDates varchar(MAX) = '['

SELECT DISTINCT @ERDates += '{"ERServiceFromDate":"' + CONVERT(VARCHAR(11),AdmissionDate,101) + '"},'
FROM #ERVisit

		SET @ERDates = CASE WHEN RIGHT(@ERDates,1) = ',' THEN LEFT(@ERDates,LEN(@ERDates)-1) ELSE @ERDates END + ']' 

		--SELECT @ERDates
*/
/***************************
ER names, addresses used over past 12 months
***************************/
DROP TABLE IF EXISTS #ERDetailsNormalized;

SELECT DISTINCT
MVDID,
'{"ERName":"' + ERNames + '", "ERAddress":"' + CONCAT(ERAddress1,' ',ERAddress2,' ',ERCity,' ',ERState,' ',ERZip) + '"}' ERDetails
INTO
#ERDetailsNormalized
FROM
(
	SELECT DISTINCT
	MVDID,
	ERNames,
	ERAddress1,
	ERAddress2,
	ERCity,
	ERState,
	ERZip,
	FIRST_VALUE(er.MVDID) OVER ( PARTITION BY er.MVDID
	ORDER BY er.ERCount ) ERDetailsId,
	ROW_NUMBER() OVER ( PARTITION BY er.MVDID ORDER BY er.ERCount ) rownum
	FROM #ERVisitCount er
	--where MVDID = '160DBAA10414F9BE8775'
	GROUP BY MVDID,ERCount--,AdmissionDate
	,ERNames,ERAddress1,ERAddress2,ERCity,ERState,ERZip
) PP
--WHERE
-- Get the CareFlow Rules. This is simply the lowest rownum
--PP.rownum = 1
--and PP.MVDID = '160DBAA10414F9BE8775'

--select * from #ERVisitCount where MVDID = '160DBAA10414F9BE8775'

CREATE INDEX IX_ERDetailsNormalized ON #ERDetailsNormalized( MVDID );

--SELECT * FROM #ERVisitNormalized;

DROP TABLE IF EXISTS #ERDetails;

DROP TABLE IF EXISTS #ERDetailsRule

;WITH ERDetailsCTE
(
	MVDID,
	ERDetails
)
AS
(
	SELECT DISTINCT
	pd.MVDID,
	STUFF
	(
		(
			SELECT
			',' + pdn.ERDetails
			FROM
			#ERDetailsNormalized pdn
			WHERE
			pdn.MVDID = pd.MVDID
			ORDER BY
			pd.MVDID,
			pd.ERDetails
			FOR XML PATH( '' )
		), 1, 1, ''
	) AS ERDetailsSerialized
	FROM
	#ERDetailsNormalized pd
)
SELECT
MVDID,
CASE
WHEN ERDetails IS NULL THEN NULL
ELSE CONCAT( '[', ERDetails, ']' )
END ERDetails
INTO
#ERDetailsRule
FROM
ERDetailsCTE;

CREATE INDEX IX_ERDetailsRule ON #ERDetailsRule( MVDID );

--select * from #ERDetailsRule where MVDID = '160DBAA10414F9BE8775'
--select * from #ERVisitCount where MVDID = '160DBAA10414F9BE8775'
/*
DECLARE @ERInfo varchar(MAX) = '['

SELECT DISTINCT @ERInfo += '{"ERName":"' + ERNames + '", "ERAddress":"' + CONCAT(ERAddress1,' ',ERAddress2,' ',ERCity,' ',ERState,' ',ERZip) + '"},'
FROM #ERVisit

		SET @ERInfo = CASE WHEN RIGHT(@ERInfo,1) = ',' THEN LEFT(@ERInfo,LEN(@ERInfo)-1) ELSE @ERInfo END + ']' 

		--SELECT @ERInfo
*/
/***************************
Pharmacy names, address, phone number (past 12 months)
****************************/
DROP TABLE IF EXISTS #PharmacyNormalized;

SELECT DISTINCT
MVDID,
'{"PharmacyName":"' + PharmacyName + '", "PharmacyAddress":"' +  + '", "PharmacyNumber":"' +  + '"}' Pharmacy
INTO
#PharmacyNormalized
FROM
(
	SELECT DISTINCT
	MVDID,
	PharmacyName,
	FIRST_VALUE( op.PharmacyName) OVER ( PARTITION BY op.MVDID,op.OpioidPrescriptionName
	,op.PrescriberID,op.PrescriberName,op.PharmacyName,op.DrugStrengthUnitOfMeasure
	,op.RefillsAuthorizedCount,op.NDCCode
	ORDER BY op.MVDID ) CareFlowRuleId,
	ROW_NUMBER() OVER ( PARTITION BY op.PharmacyName ORDER BY op.MVDID ) rownum
	FROM #OpioidPrescription op
) PP
WHERE
-- Get the CareFlow Rules. This is simply the lowest rownum
PP.rownum = 1
--and fch.MVDID = '16FFBE96B44D0892AB18'

CREATE INDEX IX_PharmacyNormalized ON #PharmacyNormalized( MVDID );

--SELECT * FROM #PharmacyNormalized;

DROP TABLE IF EXISTS #Pharmacy;

;WITH PharmacyCTE
(
	MVDID,
	Pharmacy
)
AS
(
	SELECT DISTINCT
	pd.MVDID,
	STUFF
	(
		(
			SELECT
			',' + pdn.Pharmacy
			FROM
			#PharmacyNormalized pdn
			WHERE
			pdn.MVDID = pd.MVDID
			ORDER BY
			pd.MVDID,
			pd.Pharmacy
			FOR XML PATH( '' )
		), 1, 1, ''
	) AS PharmacySerialized
	FROM
	#PharmacyNormalized pd
)
SELECT
MVDID,
CASE
WHEN Pharmacy IS NULL THEN NULL
ELSE CONCAT( '[', Pharmacy, ']' )
END Pharmacy
INTO
#PharmacyRule
FROM
PharmacyCTE;

CREATE INDEX IX_PharmacyRule ON #PharmacyRule( MVDID );

--select * from #PharmacyRule
/*
DECLARE @PharmacyInfo varchar(MAX) = '['

SELECT DISTINCT @PharmacyInfo += '{"PharmacyName":"' + PharmacyName + '", "PharmacyAddress":"' +  + '", "PharmacyNumber":"' +  + '"},'
FROM #OpioidPrescription

		SET @PharmacyInfo = CASE WHEN RIGHT(@PharmacyInfo,1) = ',' THEN LEFT(@PharmacyInfo,LEN(@PharmacyInfo)-1) ELSE @PharmacyInfo END + ']' 

		--SELECT @PharmacyInfo
*/
/*************************************
MAIN Query
*************************************/
/*
	 INSERT INTO
	 ABCBS_ReferralToNewDirections_Form
	(
		MVDID,
		FormDate,
		FormAuthor,
		CaseID,
		Actions,
		q2MemFirstName,
		q2MemLastName,
		qDOB1,
		MemID,
		phoneNumber,
		DaytimePhone,
		CallPhoneNumber,
		qEmail,
		Addr1,
		Addr2,
		Addr3,
		AltAddr1,
		AltAddr2,
		AltAddr3,
		qMemberGuardian,
		qGuardiansName,
		q1RefDate,
		q1RefTo,
		q1RefFrom,
		q2UrgentReview,
		q3ReferralSource,
		qCareFlowRule,
		q1CareFlowRule,
		q2CareFlowRule,
		q3CareFlowRule,
		q4CareFlowRule,
		q5CareFlowRule,
		q6CareFlowRule,
		q7CareFlowRule,
		q8CareFlowRule,
		q9CareFlowRule,
		q10CareFlowRule,
		q11CareFlowRule,
		q12CareFlowRule,
		q3OtherReferral,
		q3ABCBSReferral1,
		q3BHReferral,
		q3BHReferral1,
		q3BHReferral2,
		q3BHReferral3,
		q4CaseManager,
		q5CaseManagerPhone,
		q5CaseManageremail,
		q6ReqRefRecipient,
		q8Notes,
		q9DiscussedBH,
		qContactDiscussed,
		q10CallfromABCBSCM,
		q10CallfromNewDir,
		q10CallfromABCBSDietitian,
		q10CallfromABCBSPharmacy,
		q10CallfromABCBSSW,
		q11BestTimeToCallMember,
		qReasonReferral,
		qOtherReferral,
		qDetailedReason,
		q28MedHistory,
		q27memberPregnant,
		q27DueDate,
		q27OBProvider,
		q27SubstanceAbuse,
		q27Substances,
		q27ReferredFor,
		q27PCPRecord,
		q27CurrentTreatingPCP,
		LoadDate,
		LastModifiedDate,
		IsLocked
	)
*/
SELECT 
 /*
 Ref.MVDID,
	  'I' AS [Actions]
	  ,CASE WHEN MPD.LOB != 'MA' THEN LTRIM(RTRIM(left(Ref.[MemberID], len(Ref.[MemberID]) -2))) ELSE Ref.[MemberID] END AS [Member Contract Number]
      ,CASE WHEN MPD.LOB = 'MA' THEN '01' ELSE RIGHT(Ref.[MemberID], 2) END AS [Member Suffix ID Number]
	  ,MPD.LOB
   --   ,[q2MemFirstName] AS [Member First Name]	
   --   ,[q2MemLastName] AS [Member Last Name]
	  --,MPD.Gender AS [Member Gender]
	  --,convert(varchar(10),convert(date,[qDOB1]),101) AS [Member DOB]
	  --,convert(varchar,FormDate,101) AS [Create Date]
   --   ,Ref.[phoneNumber] AS [Member Home Phone Number]
   --   ,LTRIM(RTRIM([DaytimePhone])) AS [Member Daytime Phone Number]
   --   ,LTRIM(RTRIM([CallPhoneNumber])) AS [Member Cell Phone Number]
   --   ,[qEmail] AS [Member Email]
   --   ,REPLACE([Addr1] + ' ' + [Addr2] + ' ' + [Addr3],'!','') AS [Member Address]
   --   ,LTRIM(RTRIM(REPLACE([AltAddr1] + ' ' + [AltAddr2] + ' ' + [AltAddr3],'!',''))) AS [Member Alternate Address]
   --   ,[qMemberGuardian] AS [Does member have a guardian]
   --   ,REPLACE([qGuardiansName],'!','') AS [Guardians (Name and phone number)]
   --   ,convert(varchar,[q1RefDate],101) AS [Referral date]
   --   ,[q1RefTo] AS [Referral to (Recipient)]
   --   ,[q1RefFrom] AS [Referral from (Sender)]
   --   ,[q2UrgentReview] AS [Urgent review needed]
   --   ,[q3ReferralSource] AS [Referral Source]
--	  ,(select CareFlow from #CFRule where MVDID = Ref.MVDID) CareFlowRule
	  ,cfr.CareFlow CareFlowRule
	  ,opiod.Prescription OpiodPrescription
	  ,Behavior.DX BehaviorDiagnosis
	  ,PrimaryDiag.DX PrimaryDiagnosis
	  ,Pain.DX PainDiagnosis
	  ,Prescriber.Prescriber
	  ,SDOH.SDOH SDOHFactors
	  ,Chronic.DX ChronicDiagnosis
	  ,PP.Prescription PsychotropicPrescription
	  ,ERVisits.ERVisit 
	  ,ERDates.ERDateofService
	  ,ERDetail.ERDetails
	  ,Pharmacy.Pharmacy 
*/
/*
      ,@CFR
	  ,@Opioid
	  ,@BehaviorDx
	  ,@PainDx
	  ,@Prescriber
	  ,@SDOHFactor
	  ,@ChronicDx
	  ,@Psychotropic
	  ,@ERVisit
	  ,@ERDates
	  ,@ERInfo
	  ,@PharmacyInfo
 */
      --,LTRIM(RTRIM([q3OtherReferral])) AS [If other referral source, please explain]
      --,[q3ABCBSReferral1] AS [Is member currently open in ABCBS case management]
      --,LTRIM(RTRIM([q3BHReferral])) AS [Is member currently open in NDBH case management]
      --,LTRIM(RTRIM([q3BHReferral1])) AS [Member is currently engaged in]
      --,LTRIM(RTRIM(REPLACE([q3BHReferral2],'!',''))) AS [Was a GAP addressed prior to this referral]
      --,LTRIM(RTRIM(REPLACE([q3BHReferral3],'!',''))) AS [If yes, please explain GAPs addressed]
      --,REPLACE(REPLACE([q4CaseManager],'~',''''),'!','') AS [Referred by (Case Manager's name)]
      --,LTRIM(RTRIM([q5CaseManagerPhone])) AS [Case Manager's Phone]
      --,[q5CaseManageremail] AS [Case Manager's email]
      --,[q6ReqRefRecipient] AS [Does Case Manager request an update from the referral recipient]
      --,REPLACE([q8Notes],'!','') AS [Notes]
      --,[q9DiscussedBH] AS [Has case management been discussed with member]
      --,[qContactDiscussed] AS [What type of case management has been discussed]
      --,[q10CallfromABCBSCM] AS [Is member expecting a call from ABCBS CM]
      --,[q10CallfromNewDir] AS [Is member expecting a call from New Directions]
      --,[q11BestTimeToCallMember] AS [When is the best time to call the Member]
      --,REPLACE(REPLACE(REPLACE([qReasonReferral], '"', ''),'[' , ''),']' , '') AS [Reason for Referral]
      --,REPLACE([qOtherReferral],'!','') AS [If other, please explain]
      --,REPLACE([qDetailedReason],'!','') AS [Please provide a detailed reason for referral, including known diagnosis, symptoms, and concerns]
      --,REPLACE([q28MedHistory],'!','') AS [Brief History]
      --,[q27memberPregnant] AS [Is Member Pregnant]
      --,convert(varchar,[q27DueDate],101) AS [Due Date]
      --,REPLACE([q27OBProvider],'!','') AS [OB Provider]
      --,[q27SubstanceAbuse] AS [Substance Abuse]
      --,REPLACE([q27Substances],'!','') AS [If yes, what substances]
      --,REPLACE([q27ReferredFor],'!','') AS [Referred for]
      --,REPLACE([q27PCPRecord],'!','') AS [PCP on Record (Name and Phone Number)]
      --,REPLACE([q27CurrentTreatingPCP],'!','') AS [Current Treating Provider if different than PCP]
	  --,CASE WHEN AspNetUsers.FirstName IS NULL THEN COALESCE(AspNetUsers.FirstName,'None') 
	  --WHEN AspNetUsers.FirstName = '' THEN 'None'
	  --ELSE LTRIM(RTRIM(AspNetUsers.FirstName)) END AS FirstName
	  --,CASE WHEN AspNetUsers.LastName IS NULL THEN COALESCE(AspNetUsers.LastName,'None') 
	  --WHEN AspNetUsers.LastName = '' THEN 'None'
	  --ELSE LTRIM(RTRIM(AspNetUsers.LastName)) END AS LastName
	  --,LEFT(newid(),8) AS [Unique ID]
	  --,ref.LoadDate
--  INTO #FinalTable

--select top 10 * from ABCBS_ReferraltoNewDirections_Form
	Ref.MVDID,
	getDate() FormDate,
	'SYSTEM' FormAuthor,
	NULL CaseID,
	NULL Actions,
	MPD.MemberFirstName q2MemFirstName,
	MPD.MemberLastName q2MemLastName,
	MPD.DateOfBirth qDOB1,
	MPD.MemberID MemID,
	MPD.HomePhone phoneNumber,
	MPD.WorkPhone DaytimePhone,
	ISNULL( MPD.HomePhone, MPD.WorkPhone ) CallPhoneNumber,
	MPD.Email qEmail,
	MPD.Address1 Addr1,
	MPD.Address2 Addr2,
	NULL Addr3,
	NULL AltAddr1,
	NULL AltAddr2,
	NULL AltAddr3,
	NULL qMemberGuardian,
	NULL qGuardiansName,
	getDate() q1RefDate,
	'NewDirections' q1RefTo,
	'ABCBS' q1RefFrom,
	NULL q2UrgentReview,
	'CareFlowRule' q3ReferralSource,
	cfr.CareFlow qCareFlowRule,
	opiod.Prescription q1CareFlowRule,
	Behavior.DX q2CareFlowRule,
	PrimaryDiag.DX q3CareFlowRule,
	Pain.DX q4CareFlowRule,
	Prescriber.Prescriber q5CareFlowRule,
	SDOH.SDOH q6CareFlowRule,
	Chronic.DX q7CareFlowRule,
	PP.Prescription q8CareFlowRule,
	ERVisits.ERVisit q9CareFlowRule,
	ERDates.ERDateofService q10CareFlowRule,
	ERDetail.ERDetails q11CareFlowRule,
	Pharmacy.Pharmacy q12CareFlowRule,
	NULL q3OtherReferral,
	NULL q3ABCBSReferral1,
	NULL q3BHReferral,
	NULL q3BHReferral1,
	NULL q3BHReferral2,
	NULL q3BHReferral3,
	NULL q4CaseManager,
	NULL q5CaseManagerPhone,
	NULL q5CaseManageremail,
	NULL q6ReqRefRecipient,
	NULL q8Notes,
	NULL q9DiscussedBH,
	NULL qContactDiscussed,
	NULL q10CallfromABCBSCM,
	NULL q10CallfromNewDir,
	NULL q10CallfromABCBSDietitian,
	NULL q10CallfromABCBSPharmacy,
	NULL q10CallfromABCBSSW,
	NULL q11BestTimeToCallMember,
	'CareFlowRule' qReasonReferral,
	NULL qOtherReferral,
	NULL qDetailedReason,
	NULL q28MedHistory,
	NULL q27memberPregnant,
	NULL q27DueDate,
	NULL q27OBProvider,
	NULL q27SubstanceAbuse,
	NULL q27Substances,
	NULL q27ReferredFor,
	NULL q27PCPRecord,
	NULL q27CurrentTreatingPCP,
	getDate() LoadDate,
	getDate() LastModifiedDate,
	NULL IsLocked
	FROM
	#NDBHMember Ref with (readuncommitted)
	JOIN FinalMember MPD
		ON MPD.MVDID = Ref.MVDID
  LEFT JOIN #CFRule cfr
  ON cfr.MVDID = MPD.MVDID
  LEFT JOIN #OpioidRule opiod
  ON opiod.MVDID = MPD.MVDID
  LEFT JOIN #BehaviorDiagnosis Behavior
  ON Behavior.MVDID = MPD.MVDID
  LEFT JOIN #PrimaryDiagnosis PrimaryDiag
  ON PrimaryDiag.MVDID = MPD.MVDID
  LEFT JOIN #PainDiagnosis Pain
  ON Pain.MVDID = MPD.MVDID
  LEFT JOIN #PrescriberRule Prescriber
  ON Prescriber.MVDID = MPD.MVDID
  LEFT JOIN #SDOHRule SDOH
  ON SDOH.MVDID = MPD.MVDID
  LEFT JOIN #ChronicDiagnosis Chronic
  ON Chronic.MVDID = MPD.MVDID
  LEFT JOIN #PsychoPrescription PP
  ON PP.MVDID = MPD.MVDID
  LEFT JOIN #ERVisitRule ERVisits
  ON ERVisits.MVDID = MPD.MVDID
  LEFT JOIN #ERDateofServiceRule ERDates
  ON ERDates.MVDID = MPD.MVDID
  LEFT JOIN #ERDetailsRule ERDetail
  ON ERDetail.MVDID = MPD.MVDID
  LEFT JOIN #PharmacyRule Pharmacy
  ON Pharmacy.MVDID = MPD.MVDID
  --LEFT JOIN AspNetIdentity.dbo.AspNetUsers with (readuncommitted)
  --ON UserName = Ref.FormAuthor

  
END

--select distinct [q1RefFrom] FROM #NDBHMember